
Nrf24lo1+.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d4  00800100  00002b32  00002bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029f  008005d4  008005d4  0000309a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000309a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c4d2  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e05  00000000  00000000  0000fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a76  00000000  00000000  0001195f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012e8  00000000  00000000  000143d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c7b  00000000  00000000  000156c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b5b  00000000  00000000  0001833b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000528  00000000  00000000  0001ee96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 11 01 	jmp	0x222	; 0x222 <__ctors_end>
       4:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
       8:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
       c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      10:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      14:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      18:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      1c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      20:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      24:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      28:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      2c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      30:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      34:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      38:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      3c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      40:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__vector_16>
      44:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      48:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_18>
      4c:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_19>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      54:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      58:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      5c:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      60:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      64:	0c 94 39 01 	jmp	0x272	; 0x272 <__bad_interrupt>
      68:	7f 07       	cpc	r23, r31
      6a:	4d 07       	cpc	r20, r29
      6c:	4d 07       	cpc	r20, r29
      6e:	4d 07       	cpc	r20, r29
      70:	5c 07       	cpc	r21, r28
      72:	5f 07       	cpc	r21, r31
      74:	62 07       	cpc	r22, r18
      76:	65 07       	cpc	r22, r21
      78:	7f 07       	cpc	r23, r31
      7a:	7f 07       	cpc	r23, r31
      7c:	7f 07       	cpc	r23, r31
      7e:	7f 07       	cpc	r23, r31
      80:	7f 07       	cpc	r23, r31
      82:	7f 07       	cpc	r23, r31
      84:	7f 07       	cpc	r23, r31
      86:	5c 07       	cpc	r21, r28
      88:	5f 07       	cpc	r21, r31
      8a:	62 07       	cpc	r22, r18
      8c:	65 07       	cpc	r22, r21
      8e:	79 07       	cpc	r23, r25
      90:	79 07       	cpc	r23, r25
      92:	79 07       	cpc	r23, r25
      94:	79 07       	cpc	r23, r25
      96:	79 07       	cpc	r23, r25
      98:	79 07       	cpc	r23, r25
      9a:	79 07       	cpc	r23, r25
      9c:	79 07       	cpc	r23, r25
      9e:	79 07       	cpc	r23, r25
      a0:	79 07       	cpc	r23, r25
      a2:	79 07       	cpc	r23, r25
      a4:	6e 07       	cpc	r22, r30
      a6:	79 07       	cpc	r23, r25
      a8:	79 07       	cpc	r23, r25
      aa:	79 07       	cpc	r23, r25
      ac:	79 07       	cpc	r23, r25
      ae:	79 07       	cpc	r23, r25
      b0:	79 07       	cpc	r23, r25
      b2:	79 07       	cpc	r23, r25
      b4:	79 07       	cpc	r23, r25
      b6:	79 07       	cpc	r23, r25
      b8:	79 07       	cpc	r23, r25
      ba:	79 07       	cpc	r23, r25
      bc:	79 07       	cpc	r23, r25
      be:	79 07       	cpc	r23, r25
      c0:	79 07       	cpc	r23, r25
      c2:	79 07       	cpc	r23, r25
      c4:	72 07       	cpc	r23, r18

000000c6 <__trampolines_end>:
      c6:	6e 61       	ori	r22, 0x1E	; 30
      c8:	6e 00       	.word	0x006e	; ????

000000ca <__c.2332>:
      ca:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      da:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ea:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      fa:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     10a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     11a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     12a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     13a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     14a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     15a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     16a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     17a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     18a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     19a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1aa:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1ba:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001c8 <_ZL17child_pipe_enable>:
     1c8:	00 01 02 03 04 05                                   ......

000001ce <digital_pin_to_timer_PGM>:
     1ce:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     1de:	00 00 00 00                                         ....

000001e2 <digital_pin_to_bit_mask_PGM>:
     1e2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1f2:	04 08 10 20                                         ... 

000001f6 <digital_pin_to_port_PGM>:
     1f6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     206:	03 03 03 03                                         ....

0000020a <port_to_output_PGM>:
     20a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000214 <port_to_mode_PGM>:
     214:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000021e <__ctors_start>:
     21e:	98 07       	cpc	r25, r24
     220:	e4 0a       	sbc	r14, r20

00000222 <__ctors_end>:
     222:	11 24       	eor	r1, r1
     224:	1f be       	out	0x3f, r1	; 63
     226:	cf ef       	ldi	r28, 0xFF	; 255
     228:	d8 e0       	ldi	r29, 0x08	; 8
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61

0000022e <__do_copy_data>:
     22e:	15 e0       	ldi	r17, 0x05	; 5
     230:	a0 e0       	ldi	r26, 0x00	; 0
     232:	b1 e0       	ldi	r27, 0x01	; 1
     234:	e2 e3       	ldi	r30, 0x32	; 50
     236:	fb e2       	ldi	r31, 0x2B	; 43
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x10>
     23a:	05 90       	lpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	a4 3d       	cpi	r26, 0xD4	; 212
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0xc>

00000244 <__do_clear_bss>:
     244:	28 e0       	ldi	r18, 0x08	; 8
     246:	a4 ed       	ldi	r26, 0xD4	; 212
     248:	b5 e0       	ldi	r27, 0x05	; 5
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a3 37       	cpi	r26, 0x73	; 115
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>

00000254 <__do_global_ctors>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	c1 e1       	ldi	r28, 0x11	; 17
     258:	d1 e0       	ldi	r29, 0x01	; 1
     25a:	04 c0       	rjmp	.+8      	; 0x264 <__do_global_ctors+0x10>
     25c:	21 97       	sbiw	r28, 0x01	; 1
     25e:	fe 01       	movw	r30, r28
     260:	0e 94 9c 13 	call	0x2738	; 0x2738 <__tablejump2__>
     264:	cf 30       	cpi	r28, 0x0F	; 15
     266:	d1 07       	cpc	r29, r17
     268:	c9 f7       	brne	.-14     	; 0x25c <__do_global_ctors+0x8>
     26a:	0e 94 11 0b 	call	0x1622	; 0x1622 <main>
     26e:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <_exit>

00000272 <__bad_interrupt>:
     272:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000276 <_ZN8SPIClass8transferEh>:
/****************************************************************************/

void RF24::disableCRC(void)
{
    config_reg &= ~_BV(EN_CRC);
    write_register(NRF_CONFIG, config_reg);
     276:	8e bd       	out	0x2e, r24	; 46
     278:	0d b4       	in	r0, 0x2d	; 45
     27a:	07 fe       	sbrs	r0, 7
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_ZN8SPIClass8transferEh+0x2>
     27e:	8e b5       	in	r24, 0x2e	; 46
     280:	08 95       	ret

00000282 <_ZN4RF243csnEb>:
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
     28a:	16 2f       	mov	r17, r22
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN8SPIClass11setBitOrderEh>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN8SPIClass11setDataModeEh>
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_ZN8SPIClass15setClockDividerEh>
     29e:	61 2f       	mov	r22, r17
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <digitalWrite>
     2a6:	8f 89       	ldd	r24, Y+23	; 0x17
     2a8:	98 8d       	ldd	r25, Y+24	; 0x18
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <delayMicroseconds>

000002b4 <_ZN4RF242ceEb>:
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	31 81       	ldd	r19, Z+1	; 0x01
     2ba:	82 81       	ldd	r24, Z+2	; 0x02
     2bc:	93 81       	ldd	r25, Z+3	; 0x03
     2be:	28 17       	cp	r18, r24
     2c0:	39 07       	cpc	r19, r25
     2c2:	19 f0       	breq	.+6      	; 0x2ca <_ZN4RF242ceEb+0x16>
     2c4:	82 2f       	mov	r24, r18
     2c6:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <digitalWrite>
     2ca:	08 95       	ret

000002cc <_ZN4RF2416beginTransactionEv>:
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	0c 94 41 01 	jmp	0x282	; 0x282 <_ZN4RF243csnEb>

000002d2 <_ZN4RF2414endTransactionEv>:
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	0c 94 41 01 	jmp	0x282	; 0x282 <_ZN4RF243csnEb>

000002d8 <_ZN4RF2413read_registerEh>:
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
     2e0:	16 2f       	mov	r17, r22
     2e2:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     2e6:	81 2f       	mov	r24, r17
     2e8:	8f 71       	andi	r24, 0x1F	; 31
     2ea:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     2f4:	18 2f       	mov	r17, r24
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     2fc:	81 2f       	mov	r24, r17
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	08 95       	ret

00000306 <_ZN4RF2414write_registerEhPKhh>:
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	7c 01       	movw	r14, r24
     318:	16 2f       	mov	r17, r22
     31a:	6a 01       	movw	r12, r20
     31c:	c2 2f       	mov	r28, r18
     31e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     322:	81 2f       	mov	r24, r17
     324:	8f 71       	andi	r24, 0x1F	; 31
     326:	80 62       	ori	r24, 0x20	; 32
     328:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     32c:	d8 2f       	mov	r29, r24
     32e:	86 01       	movw	r16, r12
     330:	cc 23       	and	r28, r28
     332:	39 f0       	breq	.+14     	; 0x342 <_ZN4RF2414write_registerEhPKhh+0x3c>
     334:	f8 01       	movw	r30, r16
     336:	81 91       	ld	r24, Z+
     338:	8f 01       	movw	r16, r30
     33a:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     33e:	c1 50       	subi	r28, 0x01	; 1
     340:	f7 cf       	rjmp	.-18     	; 0x330 <_ZN4RF2414write_registerEhPKhh+0x2a>
     342:	c7 01       	movw	r24, r14
     344:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     348:	8d 2f       	mov	r24, r29
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	08 95       	ret

0000035c <_ZN4RF2414write_registerEhh>:
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	8c 01       	movw	r16, r24
     366:	c6 2f       	mov	r28, r22
     368:	d4 2f       	mov	r29, r20
     36a:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     36e:	8c 2f       	mov	r24, r28
     370:	8f 71       	andi	r24, 0x1F	; 31
     372:	80 62       	ori	r24, 0x20	; 32
     374:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     378:	c8 2f       	mov	r28, r24
     37a:	8d 2f       	mov	r24, r29
     37c:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     380:	c8 01       	movw	r24, r16
     382:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     386:	8c 2f       	mov	r24, r28
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <_ZN4RF2413write_payloadEPKvhh>:
     392:	bf 92       	push	r11
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	8c 01       	movw	r16, r24
     3a6:	b6 2e       	mov	r11, r22
     3a8:	c7 2e       	mov	r12, r23
     3aa:	f2 2e       	mov	r15, r18
     3ac:	fc 01       	movw	r30, r24
     3ae:	c0 85       	ldd	r28, Z+8	; 0x08
     3b0:	dc 2f       	mov	r29, r28
     3b2:	4c 17       	cp	r20, r28
     3b4:	08 f4       	brcc	.+2      	; 0x3b8 <_ZN4RF2413write_payloadEPKvhh+0x26>
     3b6:	d4 2f       	mov	r29, r20
     3b8:	f8 01       	movw	r30, r16
     3ba:	81 85       	ldd	r24, Z+9	; 0x09
     3bc:	81 11       	cpse	r24, r1
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN4RF2413write_payloadEPKvhh+0x32>
     3c0:	cd 1b       	sub	r28, r29
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_ZN4RF2413write_payloadEPKvhh+0x34>
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
     3c6:	c8 01       	movw	r24, r16
     3c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     3d2:	d8 2e       	mov	r13, r24
     3d4:	eb 2c       	mov	r14, r11
     3d6:	fc 2c       	mov	r15, r12
     3d8:	dd 23       	and	r29, r29
     3da:	39 f0       	breq	.+14     	; 0x3ea <_ZN4RF2413write_payloadEPKvhh+0x58>
     3dc:	f7 01       	movw	r30, r14
     3de:	81 91       	ld	r24, Z+
     3e0:	7f 01       	movw	r14, r30
     3e2:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     3e6:	d1 50       	subi	r29, 0x01	; 1
     3e8:	f7 cf       	rjmp	.-18     	; 0x3d8 <_ZN4RF2413write_payloadEPKvhh+0x46>
     3ea:	cc 23       	and	r28, r28
     3ec:	29 f0       	breq	.+10     	; 0x3f8 <_ZN4RF2413write_payloadEPKvhh+0x66>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     3f4:	c1 50       	subi	r28, 0x01	; 1
     3f6:	f9 cf       	rjmp	.-14     	; 0x3ea <_ZN4RF2413write_payloadEPKvhh+0x58>
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     3fe:	8d 2d       	mov	r24, r13
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	08 95       	ret

00000414 <_ZN4RF2412read_payloadEPvh>:
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	8c 01       	movw	r16, r24
     428:	b6 2e       	mov	r11, r22
     42a:	c7 2e       	mov	r12, r23
     42c:	fc 01       	movw	r30, r24
     42e:	c0 85       	ldd	r28, Z+8	; 0x08
     430:	dc 2f       	mov	r29, r28
     432:	4c 17       	cp	r20, r28
     434:	08 f4       	brcc	.+2      	; 0x438 <_ZN4RF2412read_payloadEPvh+0x24>
     436:	d4 2f       	mov	r29, r20
     438:	f8 01       	movw	r30, r16
     43a:	81 85       	ldd	r24, Z+9	; 0x09
     43c:	81 11       	cpse	r24, r1
     43e:	02 c0       	rjmp	.+4      	; 0x444 <_ZN4RF2412read_payloadEPvh+0x30>
     440:	cd 1b       	sub	r28, r29
     442:	01 c0       	rjmp	.+2      	; 0x446 <_ZN4RF2412read_payloadEPvh+0x32>
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	c8 01       	movw	r24, r16
     448:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     44c:	81 e6       	ldi	r24, 0x61	; 97
     44e:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     452:	d8 2e       	mov	r13, r24
     454:	eb 2c       	mov	r14, r11
     456:	fc 2c       	mov	r15, r12
     458:	dd 23       	and	r29, r29
     45a:	41 f0       	breq	.+16     	; 0x46c <_ZN4RF2412read_payloadEPvh+0x58>
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     462:	f7 01       	movw	r30, r14
     464:	81 93       	st	Z+, r24
     466:	7f 01       	movw	r14, r30
     468:	d1 50       	subi	r29, 0x01	; 1
     46a:	f6 cf       	rjmp	.-20     	; 0x458 <_ZN4RF2412read_payloadEPvh+0x44>
     46c:	cc 23       	and	r28, r28
     46e:	29 f0       	breq	.+10     	; 0x47a <_ZN4RF2412read_payloadEPvh+0x66>
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     476:	c1 50       	subi	r28, 0x01	; 1
     478:	f9 cf       	rjmp	.-14     	; 0x46c <_ZN4RF2412read_payloadEPvh+0x58>
     47a:	c8 01       	movw	r24, r16
     47c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     480:	8d 2d       	mov	r24, r13
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	08 95       	ret

00000496 <_ZN4RF248spiTransEh>:
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	16 2f       	mov	r17, r22
     4a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     4a4:	81 2f       	mov	r24, r17
     4a6:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     4aa:	18 2f       	mov	r17, r24
     4ac:	ce 01       	movw	r24, r28
     4ae:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     4b2:	81 2f       	mov	r24, r17
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	08 95       	ret

000004bc <_ZN4RF248flush_rxEv>:
     4bc:	62 ee       	ldi	r22, 0xE2	; 226
     4be:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN4RF248spiTransEh>

000004c2 <_ZN4RF248flush_txEv>:
     4c2:	61 ee       	ldi	r22, 0xE1	; 225
     4c4:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN4RF248spiTransEh>

000004c8 <_ZN4RF2410get_statusEv>:
     4c8:	6f ef       	ldi	r22, 0xFF	; 255
     4ca:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN4RF248spiTransEh>

000004ce <_ZN4RF24C1Ejjm>:
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	fc 01       	movw	r30, r24
     4d4:	71 83       	std	Z+1, r23	; 0x01
     4d6:	60 83       	st	Z, r22
     4d8:	53 83       	std	Z+3, r21	; 0x03
     4da:	42 83       	std	Z+2, r20	; 0x02
     4dc:	04 83       	std	Z+4, r16	; 0x04
     4de:	15 83       	std	Z+5, r17	; 0x05
     4e0:	26 83       	std	Z+6, r18	; 0x06
     4e2:	37 83       	std	Z+7, r19	; 0x07
     4e4:	80 e2       	ldi	r24, 0x20	; 32
     4e6:	80 87       	std	Z+8, r24	; 0x08
     4e8:	11 86       	std	Z+9, r1	; 0x09
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	80 8b       	std	Z+16, r24	; 0x10
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	87 8b       	std	Z+23, r24	; 0x17
     4f8:	90 8f       	std	Z+24, r25	; 0x18
     4fa:	a1 8f       	std	Z+25, r26	; 0x19
     4fc:	b2 8f       	std	Z+26, r27	; 0x1a
     4fe:	13 86       	std	Z+11, r1	; 0x0b
     500:	09 3b       	cpi	r16, 0xB9	; 185
     502:	18 48       	sbci	r17, 0x88	; 136
     504:	21 05       	cpc	r18, r1
     506:	31 05       	cpc	r19, r1
     508:	40 f4       	brcc	.+16     	; 0x51a <_ZN4RF24C1Ejjm+0x4c>
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	96 e9       	ldi	r25, 0x96	; 150
     50e:	a8 e9       	ldi	r26, 0x98	; 152
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	84 83       	std	Z+4, r24	; 0x04
     514:	95 83       	std	Z+5, r25	; 0x05
     516:	a6 83       	std	Z+6, r26	; 0x06
     518:	b7 83       	std	Z+7, r27	; 0x07
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret

00000520 <_ZN4RF2410setChannelEh>:
     520:	6d 37       	cpi	r22, 0x7D	; 125
     522:	10 f4       	brcc	.+4      	; 0x528 <_ZN4RF2410setChannelEh+0x8>
     524:	46 2f       	mov	r20, r22
     526:	01 c0       	rjmp	.+2      	; 0x52a <_ZN4RF2410setChannelEh+0xa>
     528:	4d e7       	ldi	r20, 0x7D	; 125
     52a:	65 e0       	ldi	r22, 0x05	; 5
     52c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>

00000530 <_ZN4RF2413stopListeningEv>:
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN4RF242ceEb>
     53c:	8b 89       	ldd	r24, Y+19	; 0x13
     53e:	9c 89       	ldd	r25, Y+20	; 0x14
     540:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <delayMicroseconds>
     544:	6d e1       	ldi	r22, 0x1D	; 29
     546:	ce 01       	movw	r24, r28
     548:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     54c:	81 ff       	sbrs	r24, 1
     54e:	07 c0       	rjmp	.+14     	; 0x55e <_ZN4RF2413stopListeningEv+0x2e>
     550:	8b 89       	ldd	r24, Y+19	; 0x13
     552:	9c 89       	ldd	r25, Y+20	; 0x14
     554:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <delayMicroseconds>
     558:	ce 01       	movw	r24, r28
     55a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN4RF248flush_txEv>
     55e:	49 89       	ldd	r20, Y+17	; 0x11
     560:	4e 7f       	andi	r20, 0xFE	; 254
     562:	49 8b       	std	Y+17, r20	; 0x11
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	ce 01       	movw	r24, r28
     568:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     56c:	62 e0       	ldi	r22, 0x02	; 2
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     574:	e8 ec       	ldi	r30, 0xC8	; 200
     576:	f1 e0       	ldi	r31, 0x01	; 1
     578:	e4 91       	lpm	r30, Z
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	01 c0       	rjmp	.+2      	; 0x582 <_ZN4RF2413stopListeningEv+0x52>
     580:	44 0f       	add	r20, r20
     582:	ea 95       	dec	r30
     584:	ea f7       	brpl	.-6      	; 0x580 <_ZN4RF2413stopListeningEv+0x50>
     586:	48 2b       	or	r20, r24
     588:	62 e0       	ldi	r22, 0x02	; 2
     58a:	ce 01       	movw	r24, r28
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>

00000594 <_ZN4RF247powerUpEv>:
     594:	fc 01       	movw	r30, r24
     596:	41 89       	ldd	r20, Z+17	; 0x11
     598:	41 fd       	sbrc	r20, 1
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <_ZN4RF247powerUpEv+0x1e>
     59c:	42 60       	ori	r20, 0x02	; 2
     59e:	41 8b       	std	Z+17, r20	; 0x11
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     5a6:	65 e0       	ldi	r22, 0x05	; 5
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <delay>
     5b2:	08 95       	ret

000005b4 <_ZN4RF2414startFastWriteEPKvhbb>:
     5b4:	0f 93       	push	r16
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	ec 01       	movw	r28, r24
     5bc:	21 11       	cpse	r18, r1
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     5c0:	20 ea       	ldi	r18, 0xA0	; 160
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     5c4:	20 eb       	ldi	r18, 0xB0	; 176
     5c6:	ce 01       	movw	r24, r28
     5c8:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN4RF2413write_payloadEPKvhh>
     5cc:	00 23       	and	r16, r16
     5ce:	39 f0       	breq	.+14     	; 0x5de <_ZN4RF2414startFastWriteEPKvhbb+0x2a>
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	ce 01       	movw	r24, r28
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	0f 91       	pop	r16
     5da:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_ZN4RF242ceEb>
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <_ZN4RF245writeEPKvhb>:
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
     5f6:	01 e0       	ldi	r16, 0x01	; 1
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN4RF2414startFastWriteEPKvhbb>
     5fe:	64 e6       	ldi	r22, 0x64	; 100
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <delay>
     60a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <millis>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	ce 01       	movw	r24, r28
     614:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN4RF2410get_statusEv>
     618:	80 73       	andi	r24, 0x30	; 48
     61a:	81 f4       	brne	.+32     	; 0x63c <_ZN4RF245writeEPKvhb+0x56>
     61c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <millis>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	8c 19       	sub	r24, r12
     626:	9d 09       	sbc	r25, r13
     628:	ae 09       	sbc	r26, r14
     62a:	bf 09       	sbc	r27, r15
     62c:	80 36       	cpi	r24, 0x60	; 96
     62e:	91 05       	cpc	r25, r1
     630:	a1 05       	cpc	r26, r1
     632:	b1 05       	cpc	r27, r1
     634:	70 f3       	brcs	.-36     	; 0x612 <_ZN4RF245writeEPKvhb+0x2c>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	8a 8b       	std	Y+18, r24	; 0x12
     63a:	0e c0       	rjmp	.+28     	; 0x658 <_ZN4RF245writeEPKvhb+0x72>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN4RF242ceEb>
     644:	40 e7       	ldi	r20, 0x70	; 112
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	ce 01       	movw	r24, r28
     64a:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     64e:	84 ff       	sbrs	r24, 4
     650:	05 c0       	rjmp	.+10     	; 0x65c <_ZN4RF245writeEPKvhb+0x76>
     652:	ce 01       	movw	r24, r28
     654:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN4RF248flush_txEv>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	01 c0       	rjmp	.+2      	; 0x65e <_ZN4RF245writeEPKvhb+0x78>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	08 95       	ret

0000066e <_ZN4RF245writeEPKvh>:
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_ZN4RF245writeEPKvhb>

00000674 <_ZN4RF2421getDynamicPayloadSizeEv>:
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	8c 01       	movw	r16, r24
     67c:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     680:	80 e6       	ldi	r24, 0x60	; 96
     682:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     68c:	c8 2f       	mov	r28, r24
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>
     694:	c1 32       	cpi	r28, 0x21	; 33
     696:	58 f0       	brcs	.+22     	; 0x6ae <_ZN4RF2421getDynamicPayloadSizeEv+0x3a>
     698:	c8 01       	movw	r24, r16
     69a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN4RF248flush_rxEv>
     69e:	62 e0       	ldi	r22, 0x02	; 2
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <delay>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <_ZN4RF2421getDynamicPayloadSizeEv+0x3c>
     6ae:	8c 2f       	mov	r24, r28
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <_ZN4RF249availableEPh>:
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	eb 01       	movw	r28, r22
     6be:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN4RF2410get_statusEv>
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	95 95       	asr	r25
     6c6:	87 95       	ror	r24
     6c8:	87 70       	andi	r24, 0x07	; 7
     6ca:	86 30       	cpi	r24, 0x06	; 6
     6cc:	20 f4       	brcc	.+8      	; 0x6d6 <_ZN4RF249availableEPh+0x1e>
     6ce:	20 97       	sbiw	r28, 0x00	; 0
     6d0:	21 f0       	breq	.+8      	; 0x6da <_ZN4RF249availableEPh+0x22>
     6d2:	88 83       	st	Y, r24
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <_ZN4RF249availableEPh+0x22>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <_ZN4RF249availableEPh+0x24>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <_ZN4RF244readEPvh>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
     6e8:	0e 94 0a 02 	call	0x414	; 0x414 <_ZN4RF2412read_payloadEPvh>
     6ec:	40 e7       	ldi	r20, 0x70	; 112
     6ee:	67 e0       	ldi	r22, 0x07	; 7
     6f0:	ce 01       	movw	r24, r28
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>

000006fa <_ZN4RF2415openWritingPipeEPKh>:
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
     704:	8b 01       	movw	r16, r22
     706:	28 89       	ldd	r18, Y+16	; 0x10
     708:	ab 01       	movw	r20, r22
     70a:	6a e0       	ldi	r22, 0x0A	; 10
     70c:	0e 94 83 01 	call	0x306	; 0x306 <_ZN4RF2414write_registerEhPKhh>
     710:	28 89       	ldd	r18, Y+16	; 0x10
     712:	a8 01       	movw	r20, r16
     714:	60 e1       	ldi	r22, 0x10	; 16
     716:	ce 01       	movw	r24, r28
     718:	0e 94 83 01 	call	0x306	; 0x306 <_ZN4RF2414write_registerEhPKhh>
     71c:	48 85       	ldd	r20, Y+8	; 0x08
     71e:	61 e1       	ldi	r22, 0x11	; 17
     720:	ce 01       	movw	r24, r28
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>

0000072e <_ZN4RF2415toggle_featuresEv>:
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
     734:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN4RF2416beginTransactionEv>
     738:	80 e5       	ldi	r24, 0x50	; 80
     73a:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     73e:	83 e7       	ldi	r24, 0x73	; 115
     740:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN8SPIClass8transferEh>
     744:	ce 01       	movw	r24, r28
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_ZN4RF2414endTransactionEv>

0000074e <_ZN4RF245beginEv>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	88 81       	ld	r24, Y
     756:	99 81       	ldd	r25, Y+1	; 0x01
     758:	2a 81       	ldd	r18, Y+2	; 0x02
     75a:	3b 81       	ldd	r19, Y+3	; 0x03
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	39 f0       	breq	.+14     	; 0x770 <_ZN4RF245beginEv+0x22>
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <pinMode>
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <pinMode>
     770:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN8SPIClass5beginEv>
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	ce 01       	movw	r24, r28
     778:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN4RF242ceEb>
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 41 01 	call	0x282	; 0x282 <_ZN4RF243csnEb>
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <delay>
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	ce 01       	movw	r24, r28
     796:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     79a:	ce 01       	movw	r24, r28
     79c:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN4RF2415toggle_featuresEv>
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	6d e1       	ldi	r22, 0x1D	; 29
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	6c e1       	ldi	r22, 0x1C	; 28
     7ae:	ce 01       	movw	r24, r28
     7b0:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     7b4:	19 86       	std	Y+9, r1	; 0x09
     7b6:	1a 86       	std	Y+10, r1	; 0x0a
     7b8:	40 e7       	ldi	r20, 0x70	; 112
     7ba:	67 e0       	ldi	r22, 0x07	; 7
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 90 02 	call	0x520	; 0x520 <_ZN4RF2410setChannelEh>
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN4RF248flush_rxEv>
     7d0:	ce 01       	movw	r24, r28
     7d2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN4RF248flush_txEv>
     7d6:	48 e0       	ldi	r20, 0x08	; 8
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     7e8:	89 8b       	std	Y+17, r24	; 0x11
     7ea:	ce 01       	movw	r24, r28
     7ec:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN4RF247powerUpEv>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	99 89       	ldd	r25, Y+17	; 0x11
     7f4:	9a 30       	cpi	r25, 0x0A	; 10
     7f6:	09 f0       	breq	.+2      	; 0x7fa <_ZN4RF245beginEv+0xac>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <_ZN4RF2421enableDynamicPayloadsEv>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	6d e1       	ldi	r22, 0x1D	; 29
     808:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     80c:	48 2f       	mov	r20, r24
     80e:	44 60       	ori	r20, 0x04	; 4
     810:	6d e1       	ldi	r22, 0x1D	; 29
     812:	ce 01       	movw	r24, r28
     814:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     818:	6c e1       	ldi	r22, 0x1C	; 28
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     820:	48 2f       	mov	r20, r24
     822:	4f 63       	ori	r20, 0x3F	; 63
     824:	6c e1       	ldi	r22, 0x1C	; 28
     826:	ce 01       	movw	r24, r28
     828:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	89 87       	std	Y+9, r24	; 0x09
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <_ZN4RF2416enableAckPayloadEv>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	6d e1       	ldi	r22, 0x1D	; 29
     83e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     842:	48 2f       	mov	r20, r24
     844:	46 60       	ori	r20, 0x06	; 6
     846:	6d e1       	ldi	r22, 0x1D	; 29
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     84e:	6c e1       	ldi	r22, 0x1C	; 28
     850:	ce 01       	movw	r24, r28
     852:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4RF2413read_registerEh>
     856:	48 2f       	mov	r20, r24
     858:	43 60       	ori	r20, 0x03	; 3
     85a:	6c e1       	ldi	r22, 0x1C	; 28
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	89 87       	std	Y+9, r24	; 0x09
     866:	8a 87       	std	Y+10, r24	; 0x0a
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <_ZN4RF2421isAckPayloadAvailableEv>:
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_ZN4RF249availableEPh>

00000876 <_ZN4RF2410setRetriesEhh>:
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
     876:	20 e1       	ldi	r18, 0x10	; 16
     878:	62 9f       	mul	r22, r18
     87a:	b0 01       	movw	r22, r0
     87c:	11 24       	eor	r1, r1
     87e:	4f 70       	andi	r20, 0x0F	; 15
     880:	46 2b       	or	r20, r22
     882:	64 e0       	ldi	r22, 0x04	; 4
     884:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_ZN4RF2414write_registerEhh>

00000888 <_Z14radio_ack_datav>:
							"\n\t 0x2f -> Toggle Logging ON/OFF \r";
							
uint8_t cmd[200];
int cmd_index = 0;

int radio_ack_data() {
     888:	2f 92       	push	r2
     88a:	3f 92       	push	r3
     88c:	4f 92       	push	r4
     88e:	5f 92       	push	r5
     890:	6f 92       	push	r6
     892:	7f 92       	push	r7
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <_Z14radio_ack_datav+0x26>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <_Z14radio_ack_datav+0x28>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <_Z14radio_ack_datav+0x2a>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
		if(radio.isAckPayloadAvailable()) {
     8b6:	82 eb       	ldi	r24, 0xB2	; 178
     8b8:	97 e0       	ldi	r25, 0x07	; 7
     8ba:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN4RF2421isAckPayloadAvailableEv>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <_Z14radio_ack_datav+0x3c>
     8c2:	33 c2       	rjmp	.+1126   	; 0xd2a <__stack+0x42b>
		//radio.read(&, 32);
		/* We can read ack and send it back as a radio command*/
		payload_size = radio.getDynamicPayloadSize();
     8c4:	82 eb       	ldi	r24, 0xB2	; 178
     8c6:	97 e0       	ldi	r25, 0x07	; 7
     8c8:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN4RF2421getDynamicPayloadSizeEv>
     8cc:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <payload_size>
		radio.read(payload_ack_buffer, payload_size);
     8d0:	48 2f       	mov	r20, r24
     8d2:	61 e9       	ldi	r22, 0x91	; 145
     8d4:	77 e0       	ldi	r23, 0x07	; 7
     8d6:	82 eb       	ldi	r24, 0xB2	; 178
     8d8:	97 e0       	ldi	r25, 0x07	; 7
     8da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN4RF244readEPvh>
		//Serial.println("ACK Received: ");
		if ((payload_size > 5) && (cmd[0] == 0x04)) {
     8de:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <payload_size>
     8e2:	86 30       	cpi	r24, 0x06	; 6
     8e4:	e8 f1       	brcs	.+122    	; 0x960 <__stack+0x61>
     8e6:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <cmd>
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	c9 f5       	brne	.+114    	; 0x960 <__stack+0x61>
					
			Accel[X] = ((uint8_t)payload_ack_buffer[1] << 8) | (uint8_t)payload_ack_buffer[0];
     8ee:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <payload_ack_buffer>
     8f2:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <payload_ack_buffer+0x1>
     8f6:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <Accel>
     8fa:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <Accel+0x1>
			Accel[Y] = ((uint8_t)payload_ack_buffer[3] << 8) | (uint8_t)payload_ack_buffer[2];
     8fe:	20 91 93 07 	lds	r18, 0x0793	; 0x800793 <payload_ack_buffer+0x2>
     902:	30 91 94 07 	lds	r19, 0x0794	; 0x800794 <payload_ack_buffer+0x3>
     906:	20 93 8c 07 	sts	0x078C, r18	; 0x80078c <Accel+0x2>
     90a:	30 93 8d 07 	sts	0x078D, r19	; 0x80078d <Accel+0x3>
			Accel[Z] = ((uint8_t)payload_ack_buffer[5] << 8) | (uint8_t)payload_ack_buffer[4];		
     90e:	40 91 95 07 	lds	r20, 0x0795	; 0x800795 <payload_ack_buffer+0x4>
     912:	50 91 96 07 	lds	r21, 0x0796	; 0x800796 <payload_ack_buffer+0x5>
     916:	40 93 8e 07 	sts	0x078E, r20	; 0x80078e <Accel+0x4>
     91a:	50 93 8f 07 	sts	0x078F, r21	; 0x80078f <Accel+0x5>
			sprintf(string,"%x %d \t%x %d \t%x %d", Accel[X], Accel[X], Accel[Y], Accel[Y], Accel[Z], Accel[Z] );
     91e:	5f 93       	push	r21
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	4f 93       	push	r20
     926:	3f 93       	push	r19
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	2f 93       	push	r18
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	8e e9       	ldi	r24, 0x9E	; 158
     940:	96 e0       	ldi	r25, 0x06	; 6
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sprintf>
			Serial.println(string);
     94a:	6e e9       	ldi	r22, 0x9E	; 158
     94c:	76 e0       	ldi	r23, 0x06	; 6
     94e:	8d ec       	ldi	r24, 0xCD	; 205
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
		}
		if ((payload_size > 10) && (cmd[0] == 0x03)) {
     960:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <payload_size>
     964:	8b 30       	cpi	r24, 0x0B	; 11
     966:	08 f4       	brcc	.+2      	; 0x96a <__stack+0x6b>
     968:	73 c0       	rjmp	.+230    	; 0xa50 <__stack+0x151>
     96a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <cmd>
     96e:	83 30       	cpi	r24, 0x03	; 3
     970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x75>
     972:	6e c0       	rjmp	.+220    	; 0xa50 <__stack+0x151>
			
			realGyro[X] = ((uint8_t)payload_ack_buffer[3] << 24) | ((uint8_t)payload_ack_buffer[2] << 16) | ((uint8_t)payload_ack_buffer[1] << 8) | ((uint8_t)payload_ack_buffer[0]);
     974:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <payload_ack_buffer>
     978:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <payload_ack_buffer+0x1>
     97c:	07 2e       	mov	r0, r23
     97e:	00 0c       	add	r0, r0
     980:	88 0b       	sbc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
     98c:	60 93 72 07 	sts	0x0772, r22	; 0x800772 <realGyro>
     990:	70 93 73 07 	sts	0x0773, r23	; 0x800773 <realGyro+0x1>
     994:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <realGyro+0x2>
     998:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <realGyro+0x3>
			realGyro[Y] = ((uint8_t)payload_ack_buffer[7] << 24) | ((uint8_t)payload_ack_buffer[6] << 16) | ((uint8_t)payload_ack_buffer[5] << 8) | ((uint8_t)payload_ack_buffer[4]);
     99c:	60 91 95 07 	lds	r22, 0x0795	; 0x800795 <payload_ack_buffer+0x4>
     9a0:	70 91 96 07 	lds	r23, 0x0796	; 0x800796 <payload_ack_buffer+0x5>
     9a4:	07 2e       	mov	r0, r23
     9a6:	00 0c       	add	r0, r0
     9a8:	88 0b       	sbc	r24, r24
     9aa:	99 0b       	sbc	r25, r25
     9ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     9b0:	60 93 76 07 	sts	0x0776, r22	; 0x800776 <realGyro+0x4>
     9b4:	70 93 77 07 	sts	0x0777, r23	; 0x800777 <realGyro+0x5>
     9b8:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <realGyro+0x6>
     9bc:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <realGyro+0x7>
			realGyro[Z] = ((uint8_t)payload_ack_buffer[11] << 24) | ((uint8_t)payload_ack_buffer[10] << 16) | ((uint8_t)payload_ack_buffer[9] << 8) | ((uint8_t)payload_ack_buffer[8]);
     9c0:	60 91 99 07 	lds	r22, 0x0799	; 0x800799 <payload_ack_buffer+0x8>
     9c4:	70 91 9a 07 	lds	r23, 0x079A	; 0x80079a <payload_ack_buffer+0x9>
     9c8:	07 2e       	mov	r0, r23
     9ca:	00 0c       	add	r0, r0
     9cc:	88 0b       	sbc	r24, r24
     9ce:	99 0b       	sbc	r25, r25
     9d0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     9d4:	60 93 7a 07 	sts	0x077A, r22	; 0x80077a <realGyro+0x8>
     9d8:	70 93 7b 07 	sts	0x077B, r23	; 0x80077b <realGyro+0x9>
     9dc:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <realGyro+0xa>
     9e0:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <realGyro+0xb>
			//sprintf(string,"\r\n%f \t %f \t %f",realGyro[X], realGyro[Y], realGyro[Z]);
			//sprintf(string,"Hello World");
			Serial.print(realGyro[X], HEX);
     9e4:	20 e1       	ldi	r18, 0x10	; 16
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	b7 01       	movw	r22, r14
     9ea:	a6 01       	movw	r20, r12
     9ec:	8d ec       	ldi	r24, 0xCD	; 205
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN5Print5printEdi>
			Serial.print(" ");
     9f4:	60 ef       	ldi	r22, 0xF0	; 240
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	8d ec       	ldi	r24, 0xCD	; 205
     9fa:	97 e0       	ldi	r25, 0x07	; 7
     9fc:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPKc>
			Serial.print(realGyro[Y], HEX);
     a00:	40 91 76 07 	lds	r20, 0x0776	; 0x800776 <realGyro+0x4>
     a04:	50 91 77 07 	lds	r21, 0x0777	; 0x800777 <realGyro+0x5>
     a08:	60 91 78 07 	lds	r22, 0x0778	; 0x800778 <realGyro+0x6>
     a0c:	70 91 79 07 	lds	r23, 0x0779	; 0x800779 <realGyro+0x7>
     a10:	20 e1       	ldi	r18, 0x10	; 16
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	8d ec       	ldi	r24, 0xCD	; 205
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN5Print5printEdi>
			Serial.print(" ");
     a1c:	60 ef       	ldi	r22, 0xF0	; 240
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	8d ec       	ldi	r24, 0xCD	; 205
     a22:	97 e0       	ldi	r25, 0x07	; 7
     a24:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPKc>
			Serial.print(realGyro[Z], HEX);
     a28:	40 91 7a 07 	lds	r20, 0x077A	; 0x80077a <realGyro+0x8>
     a2c:	50 91 7b 07 	lds	r21, 0x077B	; 0x80077b <realGyro+0x9>
     a30:	60 91 7c 07 	lds	r22, 0x077C	; 0x80077c <realGyro+0xa>
     a34:	70 91 7d 07 	lds	r23, 0x077D	; 0x80077d <realGyro+0xb>
     a38:	20 e1       	ldi	r18, 0x10	; 16
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	8d ec       	ldi	r24, 0xCD	; 205
     a3e:	97 e0       	ldi	r25, 0x07	; 7
     a40:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN5Print5printEdi>
			Serial.println(" ");
     a44:	60 ef       	ldi	r22, 0xF0	; 240
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	8d ec       	ldi	r24, 0xCD	; 205
     a4a:	97 e0       	ldi	r25, 0x07	; 7
     a4c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
			//Serial.println(string);
		}
		if ((payload_size > 10) && (cmd[0] == 0x02)) {
     a50:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <payload_size>
     a54:	8b 30       	cpi	r24, 0x0B	; 11
     a56:	08 f4       	brcc	.+2      	; 0xa5a <__stack+0x15b>
     a58:	50 c1       	rjmp	.+672    	; 0xcfa <__stack+0x3fb>
     a5a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <cmd>
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	09 f0       	breq	.+2      	; 0xa64 <__stack+0x165>
     a62:	4b c1       	rjmp	.+662    	; 0xcfa <__stack+0x3fb>
			Gyro[X] = ((uint8_t)payload_ack_buffer[1] << 8) | (uint8_t)payload_ack_buffer[0];
     a64:	e0 90 91 07 	lds	r14, 0x0791	; 0x800791 <payload_ack_buffer>
     a68:	f0 90 92 07 	lds	r15, 0x0792	; 0x800792 <payload_ack_buffer+0x1>
     a6c:	f0 92 85 07 	sts	0x0785, r15	; 0x800785 <Gyro+0x1>
     a70:	e0 92 84 07 	sts	0x0784, r14	; 0x800784 <Gyro>
			Gyro[Y] = ((uint8_t)payload_ack_buffer[3] << 8) | (uint8_t)payload_ack_buffer[2];
     a74:	00 91 93 07 	lds	r16, 0x0793	; 0x800793 <payload_ack_buffer+0x2>
     a78:	10 91 94 07 	lds	r17, 0x0794	; 0x800794 <payload_ack_buffer+0x3>
     a7c:	10 93 87 07 	sts	0x0787, r17	; 0x800787 <Gyro+0x3>
     a80:	00 93 86 07 	sts	0x0786, r16	; 0x800786 <Gyro+0x2>
			Gyro[Z] = ((uint8_t)payload_ack_buffer[5] << 8) | (uint8_t)payload_ack_buffer[4];
     a84:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <payload_ack_buffer+0x4>
     a88:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <payload_ack_buffer+0x5>
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	8d 83       	std	Y+5, r24	; 0x05
     a90:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <Gyro+0x5>
     a94:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <Gyro+0x4>
			Accel[X] = ((uint8_t)payload_ack_buffer[7] << 8) | (uint8_t)payload_ack_buffer[6];
     a98:	60 91 97 07 	lds	r22, 0x0797	; 0x800797 <payload_ack_buffer+0x6>
     a9c:	70 91 98 07 	lds	r23, 0x0798	; 0x800798 <payload_ack_buffer+0x7>
     aa0:	70 93 8b 07 	sts	0x078B, r23	; 0x80078b <Accel+0x1>
     aa4:	60 93 8a 07 	sts	0x078A, r22	; 0x80078a <Accel>
			Accel[Y] = ((uint8_t)payload_ack_buffer[9] << 8) | (uint8_t)payload_ack_buffer[8];
     aa8:	a0 90 99 07 	lds	r10, 0x0799	; 0x800799 <payload_ack_buffer+0x8>
     aac:	b0 90 9a 07 	lds	r11, 0x079A	; 0x80079a <payload_ack_buffer+0x9>
     ab0:	b0 92 8d 07 	sts	0x078D, r11	; 0x80078d <Accel+0x3>
     ab4:	a0 92 8c 07 	sts	0x078C, r10	; 0x80078c <Accel+0x2>
			Accel[Z] = ((uint8_t)payload_ack_buffer[11] << 8) | (uint8_t)payload_ack_buffer[10];
     ab8:	c0 90 9b 07 	lds	r12, 0x079B	; 0x80079b <payload_ack_buffer+0xa>
     abc:	d0 90 9c 07 	lds	r13, 0x079C	; 0x80079c <payload_ack_buffer+0xb>
     ac0:	d0 92 8f 07 	sts	0x078F, r13	; 0x80078f <Accel+0x5>
     ac4:	c0 92 8e 07 	sts	0x078E, r12	; 0x80078e <Accel+0x4>
			Mag[X] = ((uint8_t)payload_ack_buffer[13] << 8) | (uint8_t)payload_ack_buffer[12];
     ac8:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <payload_ack_buffer+0xc>
     acc:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <payload_ack_buffer+0xd>
     ad0:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <Mag+0x1>
     ad4:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <Mag>
			Mag[Y] = ((uint8_t)payload_ack_buffer[15] << 8) | (uint8_t)payload_ack_buffer[14];
     ad8:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <payload_ack_buffer+0xe>
     adc:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <payload_ack_buffer+0xf>
     ae0:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <Mag+0x3>
     ae4:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <Mag+0x2>
			Mag[Z] = ((uint8_t)payload_ack_buffer[17] << 8) | (uint8_t)payload_ack_buffer[16];
     ae8:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <payload_ack_buffer+0x10>
     aec:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <payload_ack_buffer+0x11>
     af0:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Mag+0x5>
     af4:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Mag+0x4>
			realAccel[X] = Accel[X] /pow(2,15) *2;
     af8:	07 2e       	mov	r0, r23
     afa:	00 0c       	add	r0, r0
     afc:	88 0b       	sbc	r24, r24
     afe:	99 0b       	sbc	r25, r25
     b00:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	58 e3       	ldi	r21, 0x38	; 56
     b0c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	0e 94 ed 07 	call	0xfda	; 0xfda <__addsf3>
     b18:	69 83       	std	Y+1, r22	; 0x01
     b1a:	7a 83       	std	Y+2, r23	; 0x02
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	47 2f       	mov	r20, r23
     b22:	38 2f       	mov	r19, r24
     b24:	29 2f       	mov	r18, r25
     b26:	86 2f       	mov	r24, r22
     b28:	94 2f       	mov	r25, r20
     b2a:	a3 2f       	mov	r26, r19
     b2c:	b2 2f       	mov	r27, r18
     b2e:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <realAccel>
     b32:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <realAccel+0x1>
     b36:	a0 93 68 07 	sts	0x0768, r26	; 0x800768 <realAccel+0x2>
     b3a:	b0 93 69 07 	sts	0x0769, r27	; 0x800769 <realAccel+0x3>
			realAccel[Y] = Accel[Y] /pow(2,15) *2;
     b3e:	b5 01       	movw	r22, r10
     b40:	bb 0c       	add	r11, r11
     b42:	88 0b       	sbc	r24, r24
     b44:	99 0b       	sbc	r25, r25
     b46:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	58 e3       	ldi	r21, 0x38	; 56
     b52:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	0e 94 ed 07 	call	0xfda	; 0xfda <__addsf3>
     b5e:	b6 2e       	mov	r11, r22
     b60:	a7 2e       	mov	r10, r23
     b62:	98 2e       	mov	r9, r24
     b64:	89 2e       	mov	r8, r25
     b66:	a5 01       	movw	r20, r10
     b68:	94 01       	movw	r18, r8
     b6a:	85 2f       	mov	r24, r21
     b6c:	94 2f       	mov	r25, r20
     b6e:	a3 2f       	mov	r26, r19
     b70:	b2 2f       	mov	r27, r18
     b72:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <realAccel+0x4>
     b76:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <realAccel+0x5>
     b7a:	a0 93 6c 07 	sts	0x076C, r26	; 0x80076c <realAccel+0x6>
     b7e:	b0 93 6d 07 	sts	0x076D, r27	; 0x80076d <realAccel+0x7>
			realAccel[Z] = Accel[Z] /pow(2,15) *2;
     b82:	b6 01       	movw	r22, r12
     b84:	dd 0c       	add	r13, r13
     b86:	88 0b       	sbc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	58 e3       	ldi	r21, 0x38	; 56
     b96:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	0e 94 ed 07 	call	0xfda	; 0xfda <__addsf3>
     ba2:	d6 2e       	mov	r13, r22
     ba4:	c7 2e       	mov	r12, r23
     ba6:	78 2e       	mov	r7, r24
     ba8:	69 2e       	mov	r6, r25
     baa:	a6 01       	movw	r20, r12
     bac:	93 01       	movw	r18, r6
     bae:	85 2f       	mov	r24, r21
     bb0:	94 2f       	mov	r25, r20
     bb2:	a3 2f       	mov	r26, r19
     bb4:	b2 2f       	mov	r27, r18
     bb6:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <realAccel+0x8>
     bba:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <realAccel+0x9>
     bbe:	a0 93 70 07 	sts	0x0770, r26	; 0x800770 <realAccel+0xa>
     bc2:	b0 93 71 07 	sts	0x0771, r27	; 0x800771 <realAccel+0xb>
			
			realGyro[X] = Gyro[X]/pow(2,15) *2000;
     bc6:	b7 01       	movw	r22, r14
     bc8:	ff 0c       	add	r15, r15
     bca:	88 0b       	sbc	r24, r24
     bcc:	99 0b       	sbc	r25, r25
     bce:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	58 e3       	ldi	r21, 0x38	; 56
     bda:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	4a ef       	ldi	r20, 0xFA	; 250
     be4:	54 e4       	ldi	r21, 0x44	; 68
     be6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     bea:	f6 2e       	mov	r15, r22
     bec:	e7 2e       	mov	r14, r23
     bee:	58 2e       	mov	r5, r24
     bf0:	49 2e       	mov	r4, r25
     bf2:	a7 01       	movw	r20, r14
     bf4:	92 01       	movw	r18, r4
     bf6:	85 2f       	mov	r24, r21
     bf8:	94 2f       	mov	r25, r20
     bfa:	a3 2f       	mov	r26, r19
     bfc:	b2 2f       	mov	r27, r18
     bfe:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <realGyro>
     c02:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <realGyro+0x1>
     c06:	a0 93 74 07 	sts	0x0774, r26	; 0x800774 <realGyro+0x2>
     c0a:	b0 93 75 07 	sts	0x0775, r27	; 0x800775 <realGyro+0x3>
			realGyro[Y] = Gyro[Y]/pow(2,15) *2000;
     c0e:	b8 01       	movw	r22, r16
     c10:	11 0f       	add	r17, r17
     c12:	88 0b       	sbc	r24, r24
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	58 e3       	ldi	r21, 0x38	; 56
     c22:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a ef       	ldi	r20, 0xFA	; 250
     c2c:	54 e4       	ldi	r21, 0x44	; 68
     c2e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     c32:	16 2f       	mov	r17, r22
     c34:	07 2f       	mov	r16, r23
     c36:	38 2e       	mov	r3, r24
     c38:	29 2e       	mov	r2, r25
     c3a:	a8 01       	movw	r20, r16
     c3c:	91 01       	movw	r18, r2
     c3e:	85 2f       	mov	r24, r21
     c40:	94 2f       	mov	r25, r20
     c42:	a3 2f       	mov	r26, r19
     c44:	b2 2f       	mov	r27, r18
     c46:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <realGyro+0x4>
     c4a:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <realGyro+0x5>
     c4e:	a0 93 78 07 	sts	0x0778, r26	; 0x800778 <realGyro+0x6>
     c52:	b0 93 79 07 	sts	0x0779, r27	; 0x800779 <realGyro+0x7>
			realGyro[Z] = Gyro[Z]/pow(2,15) *2000;
     c56:	2d 81       	ldd	r18, Y+5	; 0x05
     c58:	3e 81       	ldd	r19, Y+6	; 0x06
     c5a:	b9 01       	movw	r22, r18
     c5c:	33 0f       	add	r19, r19
     c5e:	88 0b       	sbc	r24, r24
     c60:	99 0b       	sbc	r25, r25
     c62:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	58 e3       	ldi	r21, 0x38	; 56
     c6e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	4a ef       	ldi	r20, 0xFA	; 250
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
     c7e:	9b 01       	movw	r18, r22
     c80:	46 2f       	mov	r20, r22
     c82:	53 2f       	mov	r21, r19
     c84:	bc 01       	movw	r22, r24
     c86:	40 93 7a 07 	sts	0x077A, r20	; 0x80077a <realGyro+0x8>
     c8a:	50 93 7b 07 	sts	0x077B, r21	; 0x80077b <realGyro+0x9>
     c8e:	60 93 7c 07 	sts	0x077C, r22	; 0x80077c <realGyro+0xa>
     c92:	70 93 7d 07 	sts	0x077D, r23	; 0x80077d <realGyro+0xb>
				
			sprintf(string,"%f \t%f \t%f \t%f \t%f \t%f", realAccel[X], realAccel[Y], realAccel[Z], realGyro[X], realGyro[Y], realGyro[Z]);
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	3f 93       	push	r19
     c9c:	2f 93       	push	r18
     c9e:	2f 92       	push	r2
     ca0:	3f 92       	push	r3
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	4f 92       	push	r4
     ca8:	5f 92       	push	r5
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	3c 81       	ldd	r19, Y+4	; 0x04
     cc0:	3f 93       	push	r19
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	8f 93       	push	r24
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	9f 93       	push	r25
     cca:	29 81       	ldd	r18, Y+1	; 0x01
     ccc:	2f 93       	push	r18
     cce:	84 e1       	ldi	r24, 0x14	; 20
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	8e e9       	ldi	r24, 0x9E	; 158
     cd8:	96 e0       	ldi	r25, 0x06	; 6
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sprintf>
			Serial.println(string);
     ce2:	6e e9       	ldi	r22, 0x9E	; 158
     ce4:	76 e0       	ldi	r23, 0x06	; 6
     ce6:	8d ec       	ldi	r24, 0xCD	; 205
     ce8:	97 e0       	ldi	r25, 0x07	; 7
     cea:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	1b c0       	rjmp	.+54     	; 0xd30 <__stack+0x431>
				Serial.println(payload_ack_buffer[i], HEX);
			} */
			//Serial.println(" ");
			//Serial.println(" ");
		} else {
			for (i=0; i < payload_size; i++ ) {
     cfa:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <i>
     cfe:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <i>
     d02:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <payload_size>
     d06:	e8 17       	cp	r30, r24
     d08:	98 f4       	brcc	.+38     	; 0xd30 <__stack+0x431>
				Serial.println(payload_ack_buffer[i], HEX);
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	ef 56       	subi	r30, 0x6F	; 111
     d0e:	f8 4f       	sbci	r31, 0xF8	; 248
     d10:	40 e1       	ldi	r20, 0x10	; 16
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	60 81       	ld	r22, Z
     d16:	8d ec       	ldi	r24, 0xCD	; 205
     d18:	97 e0       	ldi	r25, 0x07	; 7
     d1a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEhi>
				Serial.println(payload_ack_buffer[i], HEX);
			} */
			//Serial.println(" ");
			//Serial.println(" ");
		} else {
			for (i=0; i < payload_size; i++ ) {
     d1e:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <i>
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <i>
     d28:	ea cf       	rjmp	.-44     	; 0xcfe <__stack+0x3ff>
		}
		//Serial.write(register_value);
		//radio.write(&incomingByte, sizeof(incomingByte));
		return true;
	} else {
		return false;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <__stack+0x435>
				Serial.println(payload_ack_buffer[i], HEX);
			} */
			//Serial.println(" ");
			//Serial.println(" ");
		} else {
			for (i=0; i < payload_size; i++ ) {
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
		//radio.write(&incomingByte, sizeof(incomingByte));
		return true;
	} else {
		return false;
	}
} 
     d34:	26 96       	adiw	r28, 0x06	; 6
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	bf 90       	pop	r11
     d52:	af 90       	pop	r10
     d54:	9f 90       	pop	r9
     d56:	8f 90       	pop	r8
     d58:	7f 90       	pop	r7
     d5a:	6f 90       	pop	r6
     d5c:	5f 90       	pop	r5
     d5e:	4f 90       	pop	r4
     d60:	3f 90       	pop	r3
     d62:	2f 90       	pop	r2
     d64:	08 95       	ret

00000d66 <setup>:
		
void setup() {
	radio.begin();
     d66:	82 eb       	ldi	r24, 0xB2	; 178
     d68:	97 e0       	ldi	r25, 0x07	; 7
     d6a:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN4RF245beginEv>
	radio.openWritingPipe(address);
     d6e:	61 eb       	ldi	r22, 0xB1	; 177
     d70:	75 e0       	ldi	r23, 0x05	; 5
     d72:	82 eb       	ldi	r24, 0xB2	; 178
     d74:	97 e0       	ldi	r25, 0x07	; 7
     d76:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN4RF2415openWritingPipeEPKh>
	radio.enableAckPayload();
     d7a:	82 eb       	ldi	r24, 0xB2	; 178
     d7c:	97 e0       	ldi	r25, 0x07	; 7
     d7e:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN4RF2416enableAckPayloadEv>
	radio.enableDynamicPayloads();
     d82:	82 eb       	ldi	r24, 0xB2	; 178
     d84:	97 e0       	ldi	r25, 0x07	; 7
     d86:	0e 94 00 04 	call	0x800	; 0x800 <_ZN4RF2421enableDynamicPayloadsEv>
	radio.setRetries(5,5); 
     d8a:	45 e0       	ldi	r20, 0x05	; 5
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	82 eb       	ldi	r24, 0xB2	; 178
     d90:	97 e0       	ldi	r25, 0x07	; 7
     d92:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN4RF2410setRetriesEhh>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     d96:	26 e0       	ldi	r18, 0x06	; 6
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	51 ee       	ldi	r21, 0xE1	; 225
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	8d ec       	ldi	r24, 0xCD	; 205
     da2:	97 e0       	ldi	r25, 0x07	; 7
     da4:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial5beginEmh>
	//radio.setCRCLength(RF24_CRC_16);
	Serial.begin(57600);
	Serial.println(init_string);
     da8:	62 ef       	ldi	r22, 0xF2	; 242
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	8d ec       	ldi	r24, 0xCD	; 205
     dae:	97 e0       	ldi	r25, 0x07	; 7
     db0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
//	radio.write(&text, sizeof(text));
//	radio.setPALevel(RF24_PA_MIN);
	radio.stopListening();
     db4:	82 eb       	ldi	r24, 0xB2	; 178
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	0c 94 98 02 	jmp	0x530	; 0x530 <_ZN4RF2413stopListeningEv>

00000dbc <_Z18send_motor_commandi>:
 * https://forum.arduino.cc/index.php?topic=421081
 *
 */

void send_motor_command(int count) {
	if (cmd_index < (count - 1)) {
     dbc:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <__data_end>
     dc0:	30 91 d5 05 	lds	r19, 0x05D5	; 0x8005d5 <__data_end+0x1>
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	a9 01       	movw	r20, r18
     dc8:	4f 5f       	subi	r20, 0xFF	; 255
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	28 17       	cp	r18, r24
     dce:	39 07       	cpc	r19, r25
     dd0:	2c f4       	brge	.+10     	; 0xddc <_Z18send_motor_commandi+0x20>
		cmd_index++;
     dd2:	50 93 d5 05 	sts	0x05D5, r21	; 0x8005d5 <__data_end+0x1>
     dd6:	40 93 d4 05 	sts	0x05D4, r20	; 0x8005d4 <__data_end>
     dda:	08 95       	ret
	} else {
		radio.write(&cmd[0], sizeof(cmd[0]) * (cmd_index + 1));
     ddc:	66 ed       	ldi	r22, 0xD6	; 214
     dde:	75 e0       	ldi	r23, 0x05	; 5
     de0:	82 eb       	ldi	r24, 0xB2	; 178
     de2:	97 e0       	ldi	r25, 0x07	; 7
     de4:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN4RF245writeEPKvh>
		Serial.println(sizeof(cmd[0]) * (cmd_index + 1), DEC);
     de8:	60 91 d4 05 	lds	r22, 0x05D4	; 0x8005d4 <__data_end>
     dec:	70 91 d5 05 	lds	r23, 0x05D5	; 0x8005d5 <__data_end+0x1>
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	4a e0       	ldi	r20, 0x0A	; 10
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	8d ec       	ldi	r24, 0xCD	; 205
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN5Print7printlnEji>
		cmd_index = 0;
     e00:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <__data_end+0x1>
     e04:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <__data_end>
     e08:	08 95       	ret

00000e0a <_Z7getdatav>:
}

/* 
 *	Count : It is the number of data points we need to capture. 
*/
void getdata() {
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
	if (cmd_index < 1) {
     e12:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <__data_end>
     e16:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <__data_end+0x1>
     e1a:	18 16       	cp	r1, r24
     e1c:	19 06       	cpc	r1, r25
     e1e:	1c f4       	brge	.+6      	; 0xe26 <_Z7getdatav+0x1c>
     e20:	c0 e0       	ldi	r28, 0x00	; 0
     e22:	d0 e0       	ldi	r29, 0x00	; 0
     e24:	14 c0       	rjmp	.+40     	; 0xe4e <_Z7getdatav+0x44>
		cmd_index++;
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <__data_end+0x1>
     e2c:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <__data_end>
     e30:	22 c0       	rjmp	.+68     	; 0xe76 <_Z7getdatav+0x6c>
			for (i =0; i <= cmd[1]; i++) {
				radio.write(&cmd[0], sizeof(cmd[0]));
				int count = 5;
				while(!radio_ack_data()) {
					count++;
					delay(1);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <delay>
     e3e:	01 50       	subi	r16, 0x01	; 1
     e40:	11 09       	sbc	r17, r1
					if (count > 10) {
     e42:	21 f0       	breq	.+8      	; 0xe4c <_Z7getdatav+0x42>
		} else {
			int i=0;
			for (i =0; i <= cmd[1]; i++) {
				radio.write(&cmd[0], sizeof(cmd[0]));
				int count = 5;
				while(!radio_ack_data()) {
     e44:	0e 94 44 04 	call	0x888	; 0x888 <_Z14radio_ack_datav>
     e48:	89 2b       	or	r24, r25
     e4a:	99 f3       	breq	.-26     	; 0xe32 <_Z7getdatav+0x28>
void getdata() {
	if (cmd_index < 1) {
		cmd_index++;
		} else {
			int i=0;
			for (i =0; i <= cmd[1]; i++) {
     e4c:	21 96       	adiw	r28, 0x01	; 1
     e4e:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <cmd+0x1>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	8c 17       	cp	r24, r28
     e56:	9d 07       	cpc	r25, r29
     e58:	54 f0       	brlt	.+20     	; 0xe6e <_Z7getdatav+0x64>
				radio.write(&cmd[0], sizeof(cmd[0]));
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	66 ed       	ldi	r22, 0xD6	; 214
     e5e:	75 e0       	ldi	r23, 0x05	; 5
     e60:	82 eb       	ldi	r24, 0xB2	; 178
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN4RF245writeEPKvh>
     e68:	06 e0       	ldi	r16, 0x06	; 6
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	eb cf       	rjmp	.-42     	; 0xe44 <_Z7getdatav+0x3a>
						break;
					}
				}
				//Serial.println(sizeof(cmd[0]) * (cmd_index + 1), DEC);
			}
			cmd_index = 0;
     e6e:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <__data_end+0x1>
     e72:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <__data_end>
	}
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <_Z12send_commandv>:
 * The code will listen to readings from UART and send those signals wireless to the quadcopter
 * The 1st goal is to test the Motors - Motor signal + Speed
 */

void send_command() {
	switch (cmd[0]) {
     e80:	e0 91 d6 05 	lds	r30, 0x05D6	; 0x8005d6 <cmd>
     e84:	8e 2f       	mov	r24, r30
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	ef 32       	cpi	r30, 0x2F	; 47
     e8e:	f1 05       	cpc	r31, r1
     e90:	80 f5       	brcc	.+96     	; 0xef2 <_Z12send_commandv+0x72>
     e92:	ec 5c       	subi	r30, 0xCC	; 204
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__tablejump2__>
			Serial.println(cmd[cmd_index], HEX);
			getdata();
			return;
		break;
		case 0x04:
			Serial.println(cmd[cmd_index], HEX);
     e9a:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <__data_end>
     e9e:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <__data_end+0x1>
     ea2:	ea 52       	subi	r30, 0x2A	; 42
     ea4:	fa 4f       	sbci	r31, 0xFA	; 250
     ea6:	40 e1       	ldi	r20, 0x10	; 16
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	60 81       	ld	r22, Z
     eac:	8d ec       	ldi	r24, 0xCD	; 205
     eae:	97 e0       	ldi	r25, 0x07	; 7
     eb0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEhi>
			getdata();
     eb4:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_Z7getdatav>
		break;
		case 0x0f:
			Serial.println(cmd[cmd_index], HEX);
		break;	
		case 0x10:/* Motor control 1 */
			Serial.println("Executing Motor 1 command");
     eb8:	6b e2       	ldi	r22, 0x2B	; 43
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	08 c0       	rjmp	.+16     	; 0xece <_Z12send_commandv+0x4e>
			send_motor_command(2);
			return;
		break;
		case 0x11:/* Motor control 2 */
			Serial.println("Executing Motor 2 command");
     ebe:	65 e4       	ldi	r22, 0x45	; 69
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	05 c0       	rjmp	.+10     	; 0xece <_Z12send_commandv+0x4e>
			send_motor_command(2);
			return;
		break;
		case 0x12:/* Motor control 3 */
			Serial.println("Executing Motor 3 command");
     ec4:	6f e5       	ldi	r22, 0x5F	; 95
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	02 c0       	rjmp	.+4      	; 0xece <_Z12send_commandv+0x4e>
			send_motor_command(2);
			return;
		break;
		case 0x13:/* Motor control 4 */
			Serial.println("Executing Motor 4 command");
     eca:	69 e7       	ldi	r22, 0x79	; 121
     ecc:	71 e0       	ldi	r23, 0x01	; 1
     ece:	8d ec       	ldi	r24, 0xCD	; 205
     ed0:	97 e0       	ldi	r25, 0x07	; 7
     ed2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
			send_motor_command(2);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <_Z12send_commandv+0x60>
			return;
		break;
		case 0x1f:
			send_motor_command(3);
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_Z18send_motor_commandi>
			return;
		break;
		case 0x2f:
			Serial.println("Toggling log on Quadcopter");
     ee4:	63 e9       	ldi	r22, 0x93	; 147
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	8d ec       	ldi	r24, 0xCD	; 205
     eea:	97 e0       	ldi	r25, 0x07	; 7
     eec:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEPKc>
     ef0:	13 c0       	rjmp	.+38     	; 0xf18 <_Z12send_commandv+0x98>
			radio.write(cmd, sizeof(cmd[0]) * (cmd_index + 1));
			return;
		break;
		default: {
			Serial.print("This command does not exist: 0x");
     ef2:	6e ea       	ldi	r22, 0xAE	; 174
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	8d ec       	ldi	r24, 0xCD	; 205
     ef8:	97 e0       	ldi	r25, 0x07	; 7
     efa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPKc>
			Serial.println(cmd[cmd_index], HEX);
     efe:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <__data_end>
     f02:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <__data_end+0x1>
     f06:	ea 52       	subi	r30, 0x2A	; 42
     f08:	fa 4f       	sbci	r31, 0xFA	; 250
     f0a:	40 e1       	ldi	r20, 0x10	; 16
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 81       	ld	r22, Z
     f10:	8d ec       	ldi	r24, 0xCD	; 205
     f12:	97 e0       	ldi	r25, 0x07	; 7
     f14:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEhi>
		}
	}
	radio.write(cmd, sizeof(cmd[0]) * (cmd_index + 1));
     f18:	40 91 d4 05 	lds	r20, 0x05D4	; 0x8005d4 <__data_end>
     f1c:	50 91 d5 05 	lds	r21, 0x05D5	; 0x8005d5 <__data_end+0x1>
     f20:	4f 5f       	subi	r20, 0xFF	; 255
     f22:	5f 4f       	sbci	r21, 0xFF	; 255
     f24:	66 ed       	ldi	r22, 0xD6	; 214
     f26:	75 e0       	ldi	r23, 0x05	; 5
     f28:	82 eb       	ldi	r24, 0xB2	; 178
     f2a:	97 e0       	ldi	r25, 0x07	; 7
     f2c:	0c 94 37 03 	jmp	0x66e	; 0x66e <_ZN4RF245writeEPKvh>

00000f30 <_GLOBAL__sub_I_radio>:

	//delay(1200);
	
	//TODO:
	//Take inputs from serial and send to drone
}
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
#include <stdio.h>

#define X 0
#define Y 1
#define Z 2
RF24 radio(9, 10); // CE, CSN
     f34:	00 e8       	ldi	r16, 0x80	; 128
     f36:	16 e9       	ldi	r17, 0x96	; 150
     f38:	28 e9       	ldi	r18, 0x98	; 152
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e0       	ldi	r20, 0x0A	; 10
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	69 e0       	ldi	r22, 0x09	; 9
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	82 eb       	ldi	r24, 0xB2	; 178
     f46:	97 e0       	ldi	r25, 0x07	; 7
     f48:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN4RF24C1Ejjm>

	//delay(1200);
	
	//TODO:
	//Take inputs from serial and send to drone
}
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	08 95       	ret

00000f52 <loop>:
	radio.write(cmd, sizeof(cmd[0]) * (cmd_index + 1));
	//prev_msg = cmd[0];
	 
}
 
void loop() {
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
	radio.read_register(RF_SETUP);
	radio.read_register(SETUP_AW);
	radio.read_register(TX_ADDR);
	radio.print_address_register(text, TX_ADDR, 5);
	*/
	while(!Serial.available()) {};
     f56:	8d ec       	ldi	r24, 0xCD	; 205
     f58:	97 e0       	ldi	r25, 0x07	; 7
     f5a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN14HardwareSerial9availableEv>
     f5e:	89 2b       	or	r24, r25
     f60:	d1 f3       	breq	.-12     	; 0xf56 <loop+0x4>
	  if (Serial.available() > 0) {
     f62:	8d ec       	ldi	r24, 0xCD	; 205
     f64:	97 e0       	ldi	r25, 0x07	; 7
     f66:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN14HardwareSerial9availableEv>
     f6a:	18 16       	cp	r1, r24
     f6c:	19 06       	cpc	r1, r25
     f6e:	84 f5       	brge	.+96     	; 0xfd0 <loop+0x7e>
		  // read the incoming byte:
		  //incomingByte = Serial.read();
		  cmd[cmd_index] = (int8_t) Serial.read();
     f70:	c0 91 d4 05 	lds	r28, 0x05D4	; 0x8005d4 <__data_end>
     f74:	d0 91 d5 05 	lds	r29, 0x05D5	; 0x8005d5 <__data_end+0x1>
     f78:	8d ec       	ldi	r24, 0xCD	; 205
     f7a:	97 e0       	ldi	r25, 0x07	; 7
     f7c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN14HardwareSerial4readEv>
     f80:	ca 52       	subi	r28, 0x2A	; 42
     f82:	da 4f       	sbci	r29, 0xFA	; 250
     f84:	88 83       	st	Y, r24
		  // say what you got:
		  Serial.print("\n\rI received: 0x");
     f86:	6e ec       	ldi	r22, 0xCE	; 206
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	8d ec       	ldi	r24, 0xCD	; 205
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPKc>
		  Serial.println(cmd[cmd_index], HEX);
     f92:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <__data_end>
     f96:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <__data_end+0x1>
     f9a:	ea 52       	subi	r30, 0x2A	; 42
     f9c:	fa 4f       	sbci	r31, 0xFA	; 250
     f9e:	40 e1       	ldi	r20, 0x10	; 16
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	60 81       	ld	r22, Z
     fa4:	8d ec       	ldi	r24, 0xCD	; 205
     fa6:	97 e0       	ldi	r25, 0x07	; 7
     fa8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEhi>
		   Serial.print("Command Index is: ");
     fac:	6f ed       	ldi	r22, 0xDF	; 223
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	8d ec       	ldi	r24, 0xCD	; 205
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPKc>
		  Serial.println(cmd_index, HEX);
     fb8:	60 91 d4 05 	lds	r22, 0x05D4	; 0x8005d4 <__data_end>
     fbc:	70 91 d5 05 	lds	r23, 0x05D5	; 0x8005d5 <__data_end+0x1>
     fc0:	40 e1       	ldi	r20, 0x10	; 16
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	8d ec       	ldi	r24, 0xCD	; 205
     fc6:	97 e0       	ldi	r25, 0x07	; 7
     fc8:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print7printlnEii>
		  send_command();
     fcc:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z12send_commandv>

	//delay(1200);
	
	//TODO:
	//Take inputs from serial and send to drone
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
		   Serial.print("Command Index is: ");
		  Serial.println(cmd_index, HEX);
		  send_command();
	  }
	//radio.write(&text, sizeof(text));
	 radio_ack_data();
     fd4:	0c 94 44 04 	jmp	0x888	; 0x888 <_Z14radio_ack_datav>

00000fd8 <__subsf3>:
     fd8:	50 58       	subi	r21, 0x80	; 128

00000fda <__addsf3>:
     fda:	bb 27       	eor	r27, r27
     fdc:	aa 27       	eor	r26, r26
     fde:	0e 94 04 08 	call	0x1008	; 0x1008 <__addsf3x>
     fe2:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>
     fe6:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
     fea:	38 f0       	brcs	.+14     	; 0xffa <__addsf3+0x20>
     fec:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
     ff0:	20 f0       	brcs	.+8      	; 0xffa <__addsf3+0x20>
     ff2:	39 f4       	brne	.+14     	; 0x1002 <__addsf3+0x28>
     ff4:	9f 3f       	cpi	r25, 0xFF	; 255
     ff6:	19 f4       	brne	.+6      	; 0xffe <__addsf3+0x24>
     ff8:	26 f4       	brtc	.+8      	; 0x1002 <__addsf3+0x28>
     ffa:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>
     ffe:	0e f4       	brtc	.+2      	; 0x1002 <__addsf3+0x28>
    1000:	e0 95       	com	r30
    1002:	e7 fb       	bst	r30, 7
    1004:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>

00001008 <__addsf3x>:
    1008:	e9 2f       	mov	r30, r25
    100a:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_split3>
    100e:	58 f3       	brcs	.-42     	; 0xfe6 <__addsf3+0xc>
    1010:	ba 17       	cp	r27, r26
    1012:	62 07       	cpc	r22, r18
    1014:	73 07       	cpc	r23, r19
    1016:	84 07       	cpc	r24, r20
    1018:	95 07       	cpc	r25, r21
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__addsf3x+0x1c>
    101c:	79 f4       	brne	.+30     	; 0x103c <__addsf3x+0x34>
    101e:	a6 f5       	brtc	.+104    	; 0x1088 <__addsf3x+0x80>
    1020:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_zero>
    1024:	0e f4       	brtc	.+2      	; 0x1028 <__addsf3x+0x20>
    1026:	e0 95       	com	r30
    1028:	0b 2e       	mov	r0, r27
    102a:	ba 2f       	mov	r27, r26
    102c:	a0 2d       	mov	r26, r0
    102e:	0b 01       	movw	r0, r22
    1030:	b9 01       	movw	r22, r18
    1032:	90 01       	movw	r18, r0
    1034:	0c 01       	movw	r0, r24
    1036:	ca 01       	movw	r24, r20
    1038:	a0 01       	movw	r20, r0
    103a:	11 24       	eor	r1, r1
    103c:	ff 27       	eor	r31, r31
    103e:	59 1b       	sub	r21, r25
    1040:	99 f0       	breq	.+38     	; 0x1068 <__addsf3x+0x60>
    1042:	59 3f       	cpi	r21, 0xF9	; 249
    1044:	50 f4       	brcc	.+20     	; 0x105a <__addsf3x+0x52>
    1046:	50 3e       	cpi	r21, 0xE0	; 224
    1048:	68 f1       	brcs	.+90     	; 0x10a4 <__addsf3x+0x9c>
    104a:	1a 16       	cp	r1, r26
    104c:	f0 40       	sbci	r31, 0x00	; 0
    104e:	a2 2f       	mov	r26, r18
    1050:	23 2f       	mov	r18, r19
    1052:	34 2f       	mov	r19, r20
    1054:	44 27       	eor	r20, r20
    1056:	58 5f       	subi	r21, 0xF8	; 248
    1058:	f3 cf       	rjmp	.-26     	; 0x1040 <__addsf3x+0x38>
    105a:	46 95       	lsr	r20
    105c:	37 95       	ror	r19
    105e:	27 95       	ror	r18
    1060:	a7 95       	ror	r26
    1062:	f0 40       	sbci	r31, 0x00	; 0
    1064:	53 95       	inc	r21
    1066:	c9 f7       	brne	.-14     	; 0x105a <__addsf3x+0x52>
    1068:	7e f4       	brtc	.+30     	; 0x1088 <__addsf3x+0x80>
    106a:	1f 16       	cp	r1, r31
    106c:	ba 0b       	sbc	r27, r26
    106e:	62 0b       	sbc	r22, r18
    1070:	73 0b       	sbc	r23, r19
    1072:	84 0b       	sbc	r24, r20
    1074:	ba f0       	brmi	.+46     	; 0x10a4 <__addsf3x+0x9c>
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	a1 f0       	breq	.+40     	; 0x10a2 <__addsf3x+0x9a>
    107a:	ff 0f       	add	r31, r31
    107c:	bb 1f       	adc	r27, r27
    107e:	66 1f       	adc	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	c2 f7       	brpl	.-16     	; 0x1076 <__addsf3x+0x6e>
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <__addsf3x+0x9c>
    1088:	ba 0f       	add	r27, r26
    108a:	62 1f       	adc	r22, r18
    108c:	73 1f       	adc	r23, r19
    108e:	84 1f       	adc	r24, r20
    1090:	48 f4       	brcc	.+18     	; 0x10a4 <__addsf3x+0x9c>
    1092:	87 95       	ror	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	9e 3f       	cpi	r25, 0xFE	; 254
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__addsf3x+0x9a>
    10a0:	b0 cf       	rjmp	.-160    	; 0x1002 <__addsf3+0x28>
    10a2:	93 95       	inc	r25
    10a4:	88 0f       	add	r24, r24
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <__addsf3x+0xa2>
    10a8:	99 27       	eor	r25, r25
    10aa:	ee 0f       	add	r30, r30
    10ac:	97 95       	ror	r25
    10ae:	87 95       	ror	r24
    10b0:	08 95       	ret

000010b2 <__floatunsisf>:
    10b2:	e8 94       	clt
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <__floatsisf+0x12>

000010b6 <__floatsisf>:
    10b6:	97 fb       	bst	r25, 7
    10b8:	3e f4       	brtc	.+14     	; 0x10c8 <__floatsisf+0x12>
    10ba:	90 95       	com	r25
    10bc:	80 95       	com	r24
    10be:	70 95       	com	r23
    10c0:	61 95       	neg	r22
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	8f 4f       	sbci	r24, 0xFF	; 255
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	99 23       	and	r25, r25
    10ca:	a9 f0       	breq	.+42     	; 0x10f6 <__floatsisf+0x40>
    10cc:	f9 2f       	mov	r31, r25
    10ce:	96 e9       	ldi	r25, 0x96	; 150
    10d0:	bb 27       	eor	r27, r27
    10d2:	93 95       	inc	r25
    10d4:	f6 95       	lsr	r31
    10d6:	87 95       	ror	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f1 11       	cpse	r31, r1
    10e0:	f8 cf       	rjmp	.-16     	; 0x10d2 <__floatsisf+0x1c>
    10e2:	fa f4       	brpl	.+62     	; 0x1122 <__floatsisf+0x6c>
    10e4:	bb 0f       	add	r27, r27
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__floatsisf+0x36>
    10e8:	60 ff       	sbrs	r22, 0
    10ea:	1b c0       	rjmp	.+54     	; 0x1122 <__floatsisf+0x6c>
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <__floatsisf+0x6c>
    10f6:	88 23       	and	r24, r24
    10f8:	11 f0       	breq	.+4      	; 0x10fe <__floatsisf+0x48>
    10fa:	96 e9       	ldi	r25, 0x96	; 150
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <__floatsisf+0x6a>
    10fe:	77 23       	and	r23, r23
    1100:	21 f0       	breq	.+8      	; 0x110a <__floatsisf+0x54>
    1102:	9e e8       	ldi	r25, 0x8E	; 142
    1104:	87 2f       	mov	r24, r23
    1106:	76 2f       	mov	r23, r22
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <__floatsisf+0x5e>
    110a:	66 23       	and	r22, r22
    110c:	71 f0       	breq	.+28     	; 0x112a <__floatsisf+0x74>
    110e:	96 e8       	ldi	r25, 0x86	; 134
    1110:	86 2f       	mov	r24, r22
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	2a f0       	brmi	.+10     	; 0x1122 <__floatsisf+0x6c>
    1118:	9a 95       	dec	r25
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	da f7       	brpl	.-10     	; 0x1118 <__floatsisf+0x62>
    1122:	88 0f       	add	r24, r24
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__fp_inf>:
    112c:	97 f9       	bld	r25, 7
    112e:	9f 67       	ori	r25, 0x7F	; 127
    1130:	80 e8       	ldi	r24, 0x80	; 128
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	08 95       	ret

00001138 <__fp_nan>:
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	80 ec       	ldi	r24, 0xC0	; 192
    113c:	08 95       	ret

0000113e <__fp_pscA>:
    113e:	00 24       	eor	r0, r0
    1140:	0a 94       	dec	r0
    1142:	16 16       	cp	r1, r22
    1144:	17 06       	cpc	r1, r23
    1146:	18 06       	cpc	r1, r24
    1148:	09 06       	cpc	r0, r25
    114a:	08 95       	ret

0000114c <__fp_pscB>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	12 16       	cp	r1, r18
    1152:	13 06       	cpc	r1, r19
    1154:	14 06       	cpc	r1, r20
    1156:	05 06       	cpc	r0, r21
    1158:	08 95       	ret

0000115a <__fp_round>:
    115a:	09 2e       	mov	r0, r25
    115c:	03 94       	inc	r0
    115e:	00 0c       	add	r0, r0
    1160:	11 f4       	brne	.+4      	; 0x1166 <__fp_round+0xc>
    1162:	88 23       	and	r24, r24
    1164:	52 f0       	brmi	.+20     	; 0x117a <__fp_round+0x20>
    1166:	bb 0f       	add	r27, r27
    1168:	40 f4       	brcc	.+16     	; 0x117a <__fp_round+0x20>
    116a:	bf 2b       	or	r27, r31
    116c:	11 f4       	brne	.+4      	; 0x1172 <__fp_round+0x18>
    116e:	60 ff       	sbrs	r22, 0
    1170:	04 c0       	rjmp	.+8      	; 0x117a <__fp_round+0x20>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	08 95       	ret

0000117c <__fp_split3>:
    117c:	57 fd       	sbrc	r21, 7
    117e:	90 58       	subi	r25, 0x80	; 128
    1180:	44 0f       	add	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	59 f0       	breq	.+22     	; 0x119c <__fp_splitA+0x10>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	71 f0       	breq	.+28     	; 0x11a6 <__fp_splitA+0x1a>
    118a:	47 95       	ror	r20

0000118c <__fp_splitA>:
    118c:	88 0f       	add	r24, r24
    118e:	97 fb       	bst	r25, 7
    1190:	99 1f       	adc	r25, r25
    1192:	61 f0       	breq	.+24     	; 0x11ac <__fp_splitA+0x20>
    1194:	9f 3f       	cpi	r25, 0xFF	; 255
    1196:	79 f0       	breq	.+30     	; 0x11b6 <__fp_splitA+0x2a>
    1198:	87 95       	ror	r24
    119a:	08 95       	ret
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	14 06       	cpc	r1, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	f2 cf       	rjmp	.-28     	; 0x118a <__fp_split3+0xe>
    11a6:	46 95       	lsr	r20
    11a8:	f1 df       	rcall	.-30     	; 0x118c <__fp_splitA>
    11aa:	08 c0       	rjmp	.+16     	; 0x11bc <__fp_splitA+0x30>
    11ac:	16 16       	cp	r1, r22
    11ae:	17 06       	cpc	r1, r23
    11b0:	18 06       	cpc	r1, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	f1 cf       	rjmp	.-30     	; 0x1198 <__fp_splitA+0xc>
    11b6:	86 95       	lsr	r24
    11b8:	71 05       	cpc	r23, r1
    11ba:	61 05       	cpc	r22, r1
    11bc:	08 94       	sec
    11be:	08 95       	ret

000011c0 <__fp_zero>:
    11c0:	e8 94       	clt

000011c2 <__fp_szero>:
    11c2:	bb 27       	eor	r27, r27
    11c4:	66 27       	eor	r22, r22
    11c6:	77 27       	eor	r23, r23
    11c8:	cb 01       	movw	r24, r22
    11ca:	97 f9       	bld	r25, 7
    11cc:	08 95       	ret

000011ce <__mulsf3>:
    11ce:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3x>
    11d2:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>
    11d6:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
    11da:	38 f0       	brcs	.+14     	; 0x11ea <__mulsf3+0x1c>
    11dc:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__mulsf3+0x1c>
    11e2:	95 23       	and	r25, r21
    11e4:	11 f0       	breq	.+4      	; 0x11ea <__mulsf3+0x1c>
    11e6:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
    11ea:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>
    11ee:	11 24       	eor	r1, r1
    11f0:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>

000011f4 <__mulsf3x>:
    11f4:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_split3>
    11f8:	70 f3       	brcs	.-36     	; 0x11d6 <__mulsf3+0x8>

000011fa <__mulsf3_pse>:
    11fa:	95 9f       	mul	r25, r21
    11fc:	c1 f3       	breq	.-16     	; 0x11ee <__mulsf3+0x20>
    11fe:	95 0f       	add	r25, r21
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	55 1f       	adc	r21, r21
    1204:	62 9f       	mul	r22, r18
    1206:	f0 01       	movw	r30, r0
    1208:	72 9f       	mul	r23, r18
    120a:	bb 27       	eor	r27, r27
    120c:	f0 0d       	add	r31, r0
    120e:	b1 1d       	adc	r27, r1
    1210:	63 9f       	mul	r22, r19
    1212:	aa 27       	eor	r26, r26
    1214:	f0 0d       	add	r31, r0
    1216:	b1 1d       	adc	r27, r1
    1218:	aa 1f       	adc	r26, r26
    121a:	64 9f       	mul	r22, r20
    121c:	66 27       	eor	r22, r22
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	66 1f       	adc	r22, r22
    1224:	82 9f       	mul	r24, r18
    1226:	22 27       	eor	r18, r18
    1228:	b0 0d       	add	r27, r0
    122a:	a1 1d       	adc	r26, r1
    122c:	62 1f       	adc	r22, r18
    122e:	73 9f       	mul	r23, r19
    1230:	b0 0d       	add	r27, r0
    1232:	a1 1d       	adc	r26, r1
    1234:	62 1f       	adc	r22, r18
    1236:	83 9f       	mul	r24, r19
    1238:	a0 0d       	add	r26, r0
    123a:	61 1d       	adc	r22, r1
    123c:	22 1f       	adc	r18, r18
    123e:	74 9f       	mul	r23, r20
    1240:	33 27       	eor	r19, r19
    1242:	a0 0d       	add	r26, r0
    1244:	61 1d       	adc	r22, r1
    1246:	23 1f       	adc	r18, r19
    1248:	84 9f       	mul	r24, r20
    124a:	60 0d       	add	r22, r0
    124c:	21 1d       	adc	r18, r1
    124e:	82 2f       	mov	r24, r18
    1250:	76 2f       	mov	r23, r22
    1252:	6a 2f       	mov	r22, r26
    1254:	11 24       	eor	r1, r1
    1256:	9f 57       	subi	r25, 0x7F	; 127
    1258:	50 40       	sbci	r21, 0x00	; 0
    125a:	9a f0       	brmi	.+38     	; 0x1282 <__mulsf3_pse+0x88>
    125c:	f1 f0       	breq	.+60     	; 0x129a <__mulsf3_pse+0xa0>
    125e:	88 23       	and	r24, r24
    1260:	4a f0       	brmi	.+18     	; 0x1274 <__mulsf3_pse+0x7a>
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	bb 1f       	adc	r27, r27
    1268:	66 1f       	adc	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	50 40       	sbci	r21, 0x00	; 0
    1272:	a9 f7       	brne	.-22     	; 0x125e <__mulsf3_pse+0x64>
    1274:	9e 3f       	cpi	r25, 0xFE	; 254
    1276:	51 05       	cpc	r21, r1
    1278:	80 f0       	brcs	.+32     	; 0x129a <__mulsf3_pse+0xa0>
    127a:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
    127e:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
    1282:	5f 3f       	cpi	r21, 0xFF	; 255
    1284:	e4 f3       	brlt	.-8      	; 0x127e <__mulsf3_pse+0x84>
    1286:	98 3e       	cpi	r25, 0xE8	; 232
    1288:	d4 f3       	brlt	.-12     	; 0x127e <__mulsf3_pse+0x84>
    128a:	86 95       	lsr	r24
    128c:	77 95       	ror	r23
    128e:	67 95       	ror	r22
    1290:	b7 95       	ror	r27
    1292:	f7 95       	ror	r31
    1294:	e7 95       	ror	r30
    1296:	9f 5f       	subi	r25, 0xFF	; 255
    1298:	c1 f7       	brne	.-16     	; 0x128a <__mulsf3_pse+0x90>
    129a:	fe 2b       	or	r31, r30
    129c:	88 0f       	add	r24, r24
    129e:	91 1d       	adc	r25, r1
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12a8:	fc 01       	movw	r30, r24
  return (int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail) % SERIAL_RX_BUFFER_SIZE;
    12aa:	91 8d       	ldd	r25, Z+25	; 0x19
    12ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    12ae:	89 2f       	mov	r24, r25
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	80 5c       	subi	r24, 0xC0	; 192
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	82 1b       	sub	r24, r18
    12b8:	91 09       	sbc	r25, r1
    12ba:	60 e4       	ldi	r22, 0x40	; 64
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
}
    12c2:	08 95       	ret

000012c4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12c4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12c6:	91 8d       	ldd	r25, Z+25	; 0x19
    12c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ca:	98 17       	cp	r25, r24
    12cc:	31 f0       	breq	.+12     	; 0x12da <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    12d0:	e8 0f       	add	r30, r24
    12d2:	f1 1d       	adc	r31, r1
    12d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    12de:	08 95       	ret

000012e0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    12e0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    12e2:	91 8d       	ldd	r25, Z+25	; 0x19
    12e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    12e6:	98 17       	cp	r25, r24
    12e8:	61 f0       	breq	.+24     	; 0x1302 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    12ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ec:	df 01       	movw	r26, r30
    12ee:	a8 0f       	add	r26, r24
    12f0:	b1 1d       	adc	r27, r1
    12f2:	5d 96       	adiw	r26, 0x1d	; 29
    12f4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    12f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	9f 73       	andi	r25, 0x3F	; 63
    12fc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1306:	08 95       	ret

00001308 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1308:	8a ed       	ldi	r24, 0xDA	; 218
    130a:	9a e0       	ldi	r25, 0x0A	; 10
    130c:	89 2b       	or	r24, r25
    130e:	49 f0       	breq	.+18     	; 0x1322 <_Z14serialEventRunv+0x1a>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	89 2b       	or	r24, r25
    1316:	29 f0       	breq	.+10     	; 0x1322 <_Z14serialEventRunv+0x1a>
    1318:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_Z17Serial0_availablev>
    131c:	81 11       	cpse	r24, r1
    131e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1322:	08 95       	ret

00001324 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1324:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1326:	84 8d       	ldd	r24, Z+28	; 0x1c
    1328:	df 01       	movw	r26, r30
    132a:	a8 0f       	add	r26, r24
    132c:	b1 1d       	adc	r27, r1
    132e:	a3 5a       	subi	r26, 0xA3	; 163
    1330:	bf 4f       	sbci	r27, 0xFF	; 255
    1332:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1334:	84 8d       	ldd	r24, Z+28	; 0x1c
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	8f 73       	andi	r24, 0x3F	; 63
    133c:	99 27       	eor	r25, r25
    133e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1340:	a6 89       	ldd	r26, Z+22	; 0x16
    1342:	b7 89       	ldd	r27, Z+23	; 0x17
    1344:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1346:	a0 89       	ldd	r26, Z+16	; 0x10
    1348:	b1 89       	ldd	r27, Z+17	; 0x11
    134a:	8c 91       	ld	r24, X
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1350:	93 8d       	ldd	r25, Z+27	; 0x1b
    1352:	84 8d       	ldd	r24, Z+28	; 0x1c
    1354:	98 13       	cpse	r25, r24
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1358:	02 88       	ldd	r0, Z+18	; 0x12
    135a:	f3 89       	ldd	r31, Z+19	; 0x13
    135c:	e0 2d       	mov	r30, r0
    135e:	80 81       	ld	r24, Z
    1360:	8f 7d       	andi	r24, 0xDF	; 223
    1362:	80 83       	st	Z, r24
    1364:	08 95       	ret

00001366 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1374:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1376:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1378:	98 13       	cpse	r25, r24
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <_ZN14HardwareSerial5writeEh+0x20>
    137c:	e8 89       	ldd	r30, Y+16	; 0x10
    137e:	f9 89       	ldd	r31, Y+17	; 0x11
    1380:	80 81       	ld	r24, Z
    1382:	85 fd       	sbrc	r24, 5
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <_ZN14HardwareSerial5writeEh+0x6e>
    1386:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1388:	0b 8d       	ldd	r16, Y+27	; 0x1b
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	0f 5f       	subi	r16, 0xFF	; 255
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	0f 73       	andi	r16, 0x3F	; 63
    1392:	11 27       	eor	r17, r17
    1394:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1396:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1398:	e8 12       	cpse	r14, r24
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	07 fc       	sbrc	r0, 7
    13a0:	fa cf       	rjmp	.-12     	; 0x1396 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13a2:	e8 89       	ldd	r30, Y+16	; 0x10
    13a4:	f9 89       	ldd	r31, Y+17	; 0x11
    13a6:	80 81       	ld	r24, Z
    13a8:	85 ff       	sbrs	r24, 5
    13aa:	f5 cf       	rjmp	.-22     	; 0x1396 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    13ac:	ce 01       	movw	r24, r28
    13ae:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13b2:	f1 cf       	rjmp	.-30     	; 0x1396 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	fe 01       	movw	r30, r28
    13b8:	e8 0f       	add	r30, r24
    13ba:	f1 1d       	adc	r31, r1
    13bc:	e3 5a       	subi	r30, 0xA3	; 163
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    13c2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    13c4:	ea 89       	ldd	r30, Y+18	; 0x12
    13c6:	fb 89       	ldd	r31, Y+19	; 0x13
    13c8:	80 81       	ld	r24, Z
    13ca:	80 62       	ori	r24, 0x20	; 32
    13cc:	80 83       	st	Z, r24
  _written = true;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	88 8f       	std	Y+24, r24	; 0x18
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    13d4:	ee 89       	ldd	r30, Y+22	; 0x16
    13d6:	ff 89       	ldd	r31, Y+23	; 0x17
    13d8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    13da:	e8 89       	ldd	r30, Y+16	; 0x10
    13dc:	f9 89       	ldd	r31, Y+17	; 0x11
    13de:	80 81       	ld	r24, Z
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	08 95       	ret

000013f6 <_ZN14HardwareSerial5flushEv>:
    return c;
  }
}

void HardwareSerial::flush()
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    13fc:	88 8d       	ldd	r24, Y+24	; 0x18
    13fe:	88 23       	and	r24, r24
    1400:	c9 f0       	breq	.+50     	; 0x1434 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1402:	ea 89       	ldd	r30, Y+18	; 0x12
    1404:	fb 89       	ldd	r31, Y+19	; 0x13
    1406:	80 81       	ld	r24, Z
    1408:	85 fd       	sbrc	r24, 5
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <_ZN14HardwareSerial5flushEv+0x20>
    140c:	a8 89       	ldd	r26, Y+16	; 0x10
    140e:	b9 89       	ldd	r27, Y+17	; 0x11
    1410:	8c 91       	ld	r24, X
    1412:	86 fd       	sbrc	r24, 6
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	07 fc       	sbrc	r0, 7
    141a:	f5 cf       	rjmp	.-22     	; 0x1406 <_ZN14HardwareSerial5flushEv+0x10>
    141c:	80 81       	ld	r24, Z
    141e:	85 ff       	sbrs	r24, 5
    1420:	f2 cf       	rjmp	.-28     	; 0x1406 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1422:	a8 89       	ldd	r26, Y+16	; 0x10
    1424:	b9 89       	ldd	r27, Y+17	; 0x11
    1426:	8c 91       	ld	r24, X
    1428:	85 ff       	sbrs	r24, 5
    142a:	ed cf       	rjmp	.-38     	; 0x1406 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    142c:	ce 01       	movw	r24, r28
    142e:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1432:	e7 cf       	rjmp	.-50     	; 0x1402 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
    144a:	6a 01       	movw	r12, r20
    144c:	7b 01       	movw	r14, r22
    144e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1450:	e8 89       	ldd	r30, Y+16	; 0x10
    1452:	f9 89       	ldd	r31, Y+17	; 0x11
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1458:	41 15       	cp	r20, r1
    145a:	51 4e       	sbci	r21, 0xE1	; 225
    145c:	61 05       	cpc	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	b1 f0       	breq	.+44     	; 0x148e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	79 e0       	ldi	r23, 0x09	; 9
    1466:	8d e3       	ldi	r24, 0x3D	; 61
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a7 01       	movw	r20, r14
    146c:	96 01       	movw	r18, r12
    146e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__udivmodsi4>
    1472:	da 01       	movw	r26, r20
    1474:	c9 01       	movw	r24, r18
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	a1 09       	sbc	r26, r1
    147a:	b1 09       	sbc	r27, r1
    147c:	b6 95       	lsr	r27
    147e:	a7 95       	ror	r26
    1480:	97 95       	ror	r25
    1482:	87 95       	ror	r24
    1484:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1486:	21 15       	cp	r18, r1
    1488:	80 e1       	ldi	r24, 0x10	; 16
    148a:	38 07       	cpc	r19, r24
    148c:	a8 f0       	brcs	.+42     	; 0x14b8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    148e:	e8 89       	ldd	r30, Y+16	; 0x10
    1490:	f9 89       	ldd	r31, Y+17	; 0x11
    1492:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1494:	60 e8       	ldi	r22, 0x80	; 128
    1496:	74 e8       	ldi	r23, 0x84	; 132
    1498:	8e e1       	ldi	r24, 0x1E	; 30
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a7 01       	movw	r20, r14
    149e:	96 01       	movw	r18, r12
    14a0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__udivmodsi4>
    14a4:	da 01       	movw	r26, r20
    14a6:	c9 01       	movw	r24, r18
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	a1 09       	sbc	r26, r1
    14ac:	b1 09       	sbc	r27, r1
    14ae:	b6 95       	lsr	r27
    14b0:	a7 95       	ror	r26
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    14ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    14bc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14be:	ee 85       	ldd	r30, Y+14	; 0x0e
    14c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    14c2:	20 83       	st	Z, r18

  _written = false;
    14c4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14c6:	ec 89       	ldd	r30, Y+20	; 0x14
    14c8:	fd 89       	ldd	r31, Y+21	; 0x15
    14ca:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    14cc:	ea 89       	ldd	r30, Y+18	; 0x12
    14ce:	fb 89       	ldd	r31, Y+19	; 0x13
    14d0:	80 81       	ld	r24, Z
    14d2:	80 61       	ori	r24, 0x10	; 16
    14d4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    14d6:	ea 89       	ldd	r30, Y+18	; 0x12
    14d8:	fb 89       	ldd	r31, Y+19	; 0x13
    14da:	80 81       	ld	r24, Z
    14dc:	88 60       	ori	r24, 0x08	; 8
    14de:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    14e0:	ea 89       	ldd	r30, Y+18	; 0x12
    14e2:	fb 89       	ldd	r31, Y+19	; 0x13
    14e4:	80 81       	ld	r24, Z
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    14ea:	ea 89       	ldd	r30, Y+18	; 0x12
    14ec:	fb 89       	ldd	r31, Y+19	; 0x13
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7d       	andi	r24, 0xDF	; 223
    14f2:	80 83       	st	Z, r24
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	08 95       	ret

00001504 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	2f 93       	push	r18
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1518:	e0 91 dd 07 	lds	r30, 0x07DD	; 0x8007dd <Serial+0x10>
    151c:	f0 91 de 07 	lds	r31, 0x07DE	; 0x8007de <Serial+0x11>
    1520:	80 81       	ld	r24, Z
    1522:	e0 91 e3 07 	lds	r30, 0x07E3	; 0x8007e3 <Serial+0x16>
    1526:	f0 91 e4 07 	lds	r31, 0x07E4	; 0x8007e4 <Serial+0x17>
    152a:	82 fd       	sbrc	r24, 2
    152c:	12 c0       	rjmp	.+36     	; 0x1552 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    152e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1530:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <Serial+0x19>
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1538:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <Serial+0x1a>
    153c:	82 17       	cp	r24, r18
    153e:	51 f0       	breq	.+20     	; 0x1554 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1540:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <Serial+0x19>
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	e3 53       	subi	r30, 0x33	; 51
    1548:	f8 4f       	sbci	r31, 0xF8	; 248
    154a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    154c:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <Serial+0x19>
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1552:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    158a:	8d ec       	ldi	r24, 0xCD	; 205
    158c:	97 e0       	ldi	r25, 0x07	; 7
    158e:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15b4:	8d ec       	ldi	r24, 0xCD	; 205
    15b6:	97 e0       	ldi	r25, 0x07	; 7
    15b8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN14HardwareSerial9availableEv>
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	89 2b       	or	r24, r25
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <_Z17Serial0_availablev+0x10>
    15c2:	20 e0       	ldi	r18, 0x00	; 0
}
    15c4:	82 2f       	mov	r24, r18
    15c6:	08 95       	ret

000015c8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15c8:	ed ec       	ldi	r30, 0xCD	; 205
    15ca:	f7 e0       	ldi	r31, 0x07	; 7
    15cc:	13 82       	std	Z+3, r1	; 0x03
    15ce:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    15d0:	88 ee       	ldi	r24, 0xE8	; 232
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	84 83       	std	Z+4, r24	; 0x04
    15da:	95 83       	std	Z+5, r25	; 0x05
    15dc:	a6 83       	std	Z+6, r26	; 0x06
    15de:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    15e0:	8a eb       	ldi	r24, 0xBA	; 186
    15e2:	95 e0       	ldi	r25, 0x05	; 5
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	85 ec       	ldi	r24, 0xC5	; 197
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	95 87       	std	Z+13, r25	; 0x0d
    15ee:	84 87       	std	Z+12, r24	; 0x0c
    15f0:	84 ec       	ldi	r24, 0xC4	; 196
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	97 87       	std	Z+15, r25	; 0x0f
    15f6:	86 87       	std	Z+14, r24	; 0x0e
    15f8:	80 ec       	ldi	r24, 0xC0	; 192
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	91 8b       	std	Z+17, r25	; 0x11
    15fe:	80 8b       	std	Z+16, r24	; 0x10
    1600:	81 ec       	ldi	r24, 0xC1	; 193
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	93 8b       	std	Z+19, r25	; 0x13
    1606:	82 8b       	std	Z+18, r24	; 0x12
    1608:	82 ec       	ldi	r24, 0xC2	; 194
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	95 8b       	std	Z+21, r25	; 0x15
    160e:	84 8b       	std	Z+20, r24	; 0x14
    1610:	86 ec       	ldi	r24, 0xC6	; 198
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	97 8b       	std	Z+23, r25	; 0x17
    1616:	86 8b       	std	Z+22, r24	; 0x16
    1618:	11 8e       	std	Z+25, r1	; 0x19
    161a:	12 8e       	std	Z+26, r1	; 0x1a
    161c:	13 8e       	std	Z+27, r1	; 0x1b
    161e:	14 8e       	std	Z+28, r1	; 0x1c
    1620:	08 95       	ret

00001622 <main>:

#include <Arduino.h>

int main(void)
{
	init();
    1622:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1626:	0e 94 b3 06 	call	0xd66	; 0xd66 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    162a:	c4 e8       	ldi	r28, 0x84	; 132
    162c:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    162e:	0e 94 a9 07 	call	0xf52	; 0xf52 <loop>
		if (serialEventRun) serialEventRun();
    1632:	20 97       	sbiw	r28, 0x00	; 0
    1634:	e1 f3       	breq	.-8      	; 0x162e <main+0xc>
    1636:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z14serialEventRunv>
    163a:	f9 cf       	rjmp	.-14     	; 0x162e <main+0xc>

0000163c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	6c 01       	movw	r12, r24
    164e:	eb 01       	movw	r28, r22
    1650:	7b 01       	movw	r14, r22
    1652:	e4 0e       	add	r14, r20
    1654:	f5 1e       	adc	r15, r21
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	ce 15       	cp	r28, r14
    165c:	df 05       	cpc	r29, r15
    165e:	61 f0       	breq	.+24     	; 0x1678 <_ZN5Print5writeEPKhj+0x3c>
    1660:	69 91       	ld	r22, Y+
    1662:	d6 01       	movw	r26, r12
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	01 90       	ld	r0, Z+
    166a:	f0 81       	ld	r31, Z
    166c:	e0 2d       	mov	r30, r0
    166e:	c6 01       	movw	r24, r12
    1670:	09 95       	icall
    1672:	08 0f       	add	r16, r24
    1674:	19 1f       	adc	r17, r25
    1676:	f1 cf       	rjmp	.-30     	; 0x165a <_ZN5Print5writeEPKhj+0x1e>
    1678:	c8 01       	movw	r24, r16
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	08 95       	ret

0000168c <_ZN5Print5writeEPKc>:
    168c:	61 15       	cp	r22, r1
    168e:	71 05       	cpc	r23, r1
    1690:	79 f0       	breq	.+30     	; 0x16b0 <_ZN5Print5writeEPKc+0x24>
    1692:	fb 01       	movw	r30, r22
    1694:	01 90       	ld	r0, Z+
    1696:	00 20       	and	r0, r0
    1698:	e9 f7       	brne	.-6      	; 0x1694 <_ZN5Print5writeEPKc+0x8>
    169a:	31 97       	sbiw	r30, 0x01	; 1
    169c:	af 01       	movw	r20, r30
    169e:	46 1b       	sub	r20, r22
    16a0:	57 0b       	sbc	r21, r23
    16a2:	dc 01       	movw	r26, r24
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	02 80       	ldd	r0, Z+2	; 0x02
    16aa:	f3 81       	ldd	r31, Z+3	; 0x03
    16ac:	e0 2d       	mov	r30, r0
    16ae:	09 94       	ijmp
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	08 95       	ret

000016b6 <_ZN5Print5printEPKc>:
    16b6:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print5writeEPKc>

000016ba <_ZN5Print5printEc>:
    16ba:	dc 01       	movw	r26, r24
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	01 90       	ld	r0, Z+
    16c2:	f0 81       	ld	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	09 94       	ijmp

000016c8 <_ZN5Print7printlnEv>:
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	ec 01       	movw	r28, r24
    16d2:	6d e0       	ldi	r22, 0x0D	; 13
    16d4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN5Print5printEc>
    16d8:	8c 01       	movw	r16, r24
    16da:	6a e0       	ldi	r22, 0x0A	; 10
    16dc:	ce 01       	movw	r24, r28
    16de:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN5Print5printEc>
    16e2:	80 0f       	add	r24, r16
    16e4:	91 1f       	adc	r25, r17
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <_ZN5Print7printlnEPKc>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5writeEPKc>
    16fe:	8c 01       	movw	r16, r24
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN5Print7printlnEv>
    1706:	80 0f       	add	r24, r16
    1708:	91 1f       	adc	r25, r17
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <_ZN5Print11printNumberEmh>:
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	a1 97       	sbiw	r28, 0x21	; 33
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	6c 01       	movw	r12, r24
    173e:	14 2f       	mov	r17, r20
    1740:	e5 2f       	mov	r30, r21
    1742:	cb 01       	movw	r24, r22
    1744:	02 2f       	mov	r16, r18
    1746:	19 a2       	std	Y+33, r1	; 0x21
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	08 f4       	brcc	.+2      	; 0x174e <_ZN5Print11printNumberEmh+0x3a>
    174c:	0a e0       	ldi	r16, 0x0A	; 10
    174e:	7e 01       	movw	r14, r28
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	e2 0e       	add	r14, r18
    1754:	f1 1c       	adc	r15, r1
    1756:	80 2e       	mov	r8, r16
    1758:	91 2c       	mov	r9, r1
    175a:	a1 2c       	mov	r10, r1
    175c:	b1 2c       	mov	r11, r1
    175e:	61 2f       	mov	r22, r17
    1760:	7e 2f       	mov	r23, r30
    1762:	a5 01       	movw	r20, r10
    1764:	94 01       	movw	r18, r8
    1766:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__udivmodsi4>
    176a:	02 9f       	mul	r16, r18
    176c:	10 19       	sub	r17, r0
    176e:	11 24       	eor	r1, r1
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	e8 1a       	sub	r14, r24
    1774:	f1 08       	sbc	r15, r1
    1776:	1a 30       	cpi	r17, 0x0A	; 10
    1778:	10 f4       	brcc	.+4      	; 0x177e <_ZN5Print11printNumberEmh+0x6a>
    177a:	10 5d       	subi	r17, 0xD0	; 208
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <_ZN5Print11printNumberEmh+0x6c>
    177e:	19 5c       	subi	r17, 0xC9	; 201
    1780:	f7 01       	movw	r30, r14
    1782:	10 83       	st	Z, r17
    1784:	12 2f       	mov	r17, r18
    1786:	e3 2f       	mov	r30, r19
    1788:	ca 01       	movw	r24, r20
    178a:	23 2b       	or	r18, r19
    178c:	24 2b       	or	r18, r20
    178e:	25 2b       	or	r18, r21
    1790:	31 f7       	brne	.-52     	; 0x175e <_ZN5Print11printNumberEmh+0x4a>
    1792:	b7 01       	movw	r22, r14
    1794:	c6 01       	movw	r24, r12
    1796:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5writeEPKc>
    179a:	a1 96       	adiw	r28, 0x21	; 33
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	9f 90       	pop	r9
    17bc:	8f 90       	pop	r8
    17be:	08 95       	ret

000017c0 <_ZN5Print5printEmi>:
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <_ZN5Print5printEmi+0x16>
    17c6:	dc 01       	movw	r26, r24
    17c8:	ed 91       	ld	r30, X+
    17ca:	fc 91       	ld	r31, X
    17cc:	01 90       	ld	r0, Z+
    17ce:	f0 81       	ld	r31, Z
    17d0:	e0 2d       	mov	r30, r0
    17d2:	64 2f       	mov	r22, r20
    17d4:	09 94       	ijmp
    17d6:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>

000017da <_ZN5Print5printEhi>:
    17da:	9a 01       	movw	r18, r20
    17dc:	46 2f       	mov	r20, r22
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_ZN5Print5printEmi>

000017e8 <_ZN5Print7printlnEhi>:
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	ec 01       	movw	r28, r24
    17f2:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN5Print5printEhi>
    17f6:	8c 01       	movw	r16, r24
    17f8:	ce 01       	movw	r24, r28
    17fa:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN5Print7printlnEv>
    17fe:	80 0f       	add	r24, r16
    1800:	91 1f       	adc	r25, r17
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <_ZN5Print5printEji>:
    180c:	9a 01       	movw	r18, r20
    180e:	ab 01       	movw	r20, r22
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_ZN5Print5printEmi>

00001818 <_ZN5Print7printlnEji>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5printEji>
    1826:	8c 01       	movw	r16, r24
    1828:	ce 01       	movw	r24, r28
    182a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN5Print7printlnEv>
    182e:	80 0f       	add	r24, r16
    1830:	91 1f       	adc	r25, r17
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret

0000183c <_ZN5Print5printEli>:
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	81 f4       	brne	.+32     	; 0x1872 <_ZN5Print5printEli+0x36>
    1852:	dc 01       	movw	r26, r24
    1854:	ed 91       	ld	r30, X+
    1856:	fc 91       	ld	r31, X
    1858:	01 90       	ld	r0, Z+
    185a:	f0 81       	ld	r31, Z
    185c:	e0 2d       	mov	r30, r0
    185e:	64 2f       	mov	r22, r20
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	ff 90       	pop	r15
    186a:	ef 90       	pop	r14
    186c:	df 90       	pop	r13
    186e:	cf 90       	pop	r12
    1870:	09 94       	ijmp
    1872:	2a 30       	cpi	r18, 0x0A	; 10
    1874:	31 05       	cpc	r19, r1
    1876:	01 f5       	brne	.+64     	; 0x18b8 <_ZN5Print5printEli+0x7c>
    1878:	77 ff       	sbrs	r23, 7
    187a:	1d c0       	rjmp	.+58     	; 0x18b6 <_ZN5Print5printEli+0x7a>
    187c:	6a 01       	movw	r12, r20
    187e:	7b 01       	movw	r14, r22
    1880:	ec 01       	movw	r28, r24
    1882:	6d e2       	ldi	r22, 0x2D	; 45
    1884:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN5Print5printEc>
    1888:	8c 01       	movw	r16, r24
    188a:	44 27       	eor	r20, r20
    188c:	55 27       	eor	r21, r21
    188e:	ba 01       	movw	r22, r20
    1890:	4c 19       	sub	r20, r12
    1892:	5d 09       	sbc	r21, r13
    1894:	6e 09       	sbc	r22, r14
    1896:	7f 09       	sbc	r23, r15
    1898:	2a e0       	ldi	r18, 0x0A	; 10
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>
    18a0:	80 0f       	add	r24, r16
    18a2:	91 1f       	adc	r25, r17
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	08 95       	ret
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	df 90       	pop	r13
    18c6:	cf 90       	pop	r12
    18c8:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>

000018cc <_ZN5Print5printEii>:
    18cc:	9a 01       	movw	r18, r20
    18ce:	ab 01       	movw	r20, r22
    18d0:	77 0f       	add	r23, r23
    18d2:	66 0b       	sbc	r22, r22
    18d4:	77 0b       	sbc	r23, r23
    18d6:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <_ZN5Print5printEli>

000018da <_ZN5Print7printlnEii>:
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
    18e4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN5Print5printEii>
    18e8:	8c 01       	movw	r16, r24
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN5Print7printlnEv>
    18f0:	80 0f       	add	r24, r16
    18f2:	91 1f       	adc	r25, r17
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret

000018fe <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    18fe:	7f 92       	push	r7
    1900:	8f 92       	push	r8
    1902:	9f 92       	push	r9
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	8c 01       	movw	r16, r24
    191a:	6a 01       	movw	r12, r20
    191c:	7b 01       	movw	r14, r22
    191e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1920:	9a 01       	movw	r18, r20
    1922:	ab 01       	movw	r20, r22
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__unordsf2>
    192c:	88 23       	and	r24, r24
    192e:	19 f0       	breq	.+6      	; 0x1936 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1930:	66 ec       	ldi	r22, 0xC6	; 198
    1932:	75 e0       	ldi	r23, 0x05	; 5
    1934:	27 c0       	rjmp	.+78     	; 0x1984 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1936:	46 01       	movw	r8, r12
    1938:	57 01       	movw	r10, r14
    193a:	e8 94       	clt
    193c:	b7 f8       	bld	r11, 7
    193e:	2f ef       	ldi	r18, 0xFF	; 255
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	5f e7       	ldi	r21, 0x7F	; 127
    1946:	c5 01       	movw	r24, r10
    1948:	b4 01       	movw	r22, r8
    194a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__unordsf2>
    194e:	81 11       	cpse	r24, r1
    1950:	0d c0       	rjmp	.+26     	; 0x196c <_ZN5Print10printFloatEdh+0x6e>
    1952:	2f ef       	ldi	r18, 0xFF	; 255
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	5f e7       	ldi	r21, 0x7F	; 127
    195a:	c5 01       	movw	r24, r10
    195c:	b4 01       	movw	r22, r8
    195e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__cmpsf2>
    1962:	18 16       	cp	r1, r24
    1964:	1c f4       	brge	.+6      	; 0x196c <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1966:	6a ec       	ldi	r22, 0xCA	; 202
    1968:	75 e0       	ldi	r23, 0x05	; 5
    196a:	0c c0       	rjmp	.+24     	; 0x1984 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	5f e4       	ldi	r21, 0x4F	; 79
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__gesf2>
    197c:	18 16       	cp	r1, r24
    197e:	94 f4       	brge	.+36     	; 0x19a4 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1980:	6e ec       	ldi	r22, 0xCE	; 206
    1982:	75 e0       	ldi	r23, 0x05	; 5
    1984:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	9f 90       	pop	r9
    199c:	8f 90       	pop	r8
    199e:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19a0:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    19a4:	2f ef       	ldi	r18, 0xFF	; 255
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	5f ec       	ldi	r21, 0xCF	; 207
    19ac:	c7 01       	movw	r24, r14
    19ae:	b6 01       	movw	r22, r12
    19b0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__cmpsf2>
    19b4:	87 fd       	sbrc	r24, 7
    19b6:	e4 cf       	rjmp	.-56     	; 0x1980 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	a9 01       	movw	r20, r18
    19be:	c7 01       	movw	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__cmpsf2>
    19c6:	87 ff       	sbrs	r24, 7
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    19ca:	6d e2       	ldi	r22, 0x2D	; 45
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN5Print5printEc>
    19d2:	ec 01       	movw	r28, r24
     number = -number;
    19d4:	f7 fa       	bst	r15, 7
    19d6:	f0 94       	com	r15
    19d8:	f7 f8       	bld	r15, 7
    19da:	f0 94       	com	r15
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    19de:	c0 e0       	ldi	r28, 0x00	; 0
    19e0:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    19e2:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    19ec:	7b 14       	cp	r7, r11
    19ee:	41 f0       	breq	.+16     	; 0x1a00 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    19fc:	b3 94       	inc	r11
    19fe:	f6 cf       	rjmp	.-20     	; 0x19ec <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1a00:	a7 01       	movw	r20, r14
    1a02:	96 01       	movw	r18, r12
    1a04:	0e 94 ed 07 	call	0xfda	; 0xfda <__addsf3>
    1a08:	6b 01       	movw	r12, r22
    1a0a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1a0c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__fixunssfsi>
    1a10:	4b 01       	movw	r8, r22
    1a12:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1a14:	2a e0       	ldi	r18, 0x0A	; 10
    1a16:	ab 01       	movw	r20, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1a20:	c8 0f       	add	r28, r24
    1a22:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1a24:	77 20       	and	r7, r7
    1a26:	c9 f1       	breq	.+114    	; 0x1a9a <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1a28:	c5 01       	movw	r24, r10
    1a2a:	b4 01       	movw	r22, r8
    1a2c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__floatunsisf>
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	c7 01       	movw	r24, r14
    1a36:	b6 01       	movw	r22, r12
    1a38:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__subsf3>
    1a3c:	6b 01       	movw	r12, r22
    1a3e:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a40:	62 ed       	ldi	r22, 0xD2	; 210
    1a42:	75 e0       	ldi	r23, 0x05	; 5
    1a44:	c8 01       	movw	r24, r16
    1a46:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1a4a:	c8 0f       	add	r28, r24
    1a4c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	c7 01       	movw	r24, r14
    1a58:	b6 01       	movw	r22, r12
    1a5a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3>
    1a5e:	4b 01       	movw	r8, r22
    1a60:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    1a62:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fixsfsi>
    1a66:	6b 01       	movw	r12, r22
    1a68:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1a6a:	4a e0       	ldi	r20, 0x0A	; 10
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	c8 01       	movw	r24, r16
    1a70:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN5Print5printEii>
    1a74:	c8 0f       	add	r28, r24
    1a76:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1a78:	b6 01       	movw	r22, r12
    1a7a:	dd 0c       	add	r13, r13
    1a7c:	88 0b       	sbc	r24, r24
    1a7e:	99 0b       	sbc	r25, r25
    1a80:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	c5 01       	movw	r24, r10
    1a8a:	b4 01       	movw	r22, r8
    1a8c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__subsf3>
    1a90:	6b 01       	movw	r12, r22
    1a92:	7c 01       	movw	r14, r24
    1a94:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1a96:	71 10       	cpse	r7, r1
    1a98:	da cf       	rjmp	.-76     	; 0x1a4e <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1a9a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	df 90       	pop	r13
    1aaa:	cf 90       	pop	r12
    1aac:	bf 90       	pop	r11
    1aae:	af 90       	pop	r10
    1ab0:	9f 90       	pop	r9
    1ab2:	8f 90       	pop	r8
    1ab4:	7f 90       	pop	r7
    1ab6:	08 95       	ret

00001ab8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1ab8:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <_ZN5Print10printFloatEdh>

00001abc <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	8f 93       	push	r24
    1acc:	9f 93       	push	r25
    1ace:	af 93       	push	r26
    1ad0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1ad2:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <timer0_millis>
    1ad6:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <timer0_millis+0x1>
    1ada:	a0 91 6d 08 	lds	r26, 0x086D	; 0x80086d <timer0_millis+0x2>
    1ade:	b0 91 6e 08 	lds	r27, 0x086E	; 0x80086e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1ae2:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1ae6:	23 e0       	ldi	r18, 0x03	; 3
    1ae8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1aea:	2d 37       	cpi	r18, 0x7D	; 125
    1aec:	20 f4       	brcc	.+8      	; 0x1af6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	a1 1d       	adc	r26, r1
    1af2:	b1 1d       	adc	r27, r1
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1af6:	26 e8       	ldi	r18, 0x86	; 134
    1af8:	23 0f       	add	r18, r19
		m += 1;
    1afa:	02 96       	adiw	r24, 0x02	; 2
    1afc:	a1 1d       	adc	r26, r1
    1afe:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1b00:	20 93 6a 08 	sts	0x086A, r18	; 0x80086a <timer0_fract>
	timer0_millis = m;
    1b04:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <timer0_millis>
    1b08:	90 93 6c 08 	sts	0x086C, r25	; 0x80086c <timer0_millis+0x1>
    1b0c:	a0 93 6d 08 	sts	0x086D, r26	; 0x80086d <timer0_millis+0x2>
    1b10:	b0 93 6e 08 	sts	0x086E, r27	; 0x80086e <timer0_millis+0x3>
	timer0_overflow_count++;
    1b14:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <timer0_overflow_count>
    1b18:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <timer0_overflow_count+0x1>
    1b1c:	a0 91 71 08 	lds	r26, 0x0871	; 0x800871 <timer0_overflow_count+0x2>
    1b20:	b0 91 72 08 	lds	r27, 0x0872	; 0x800872 <timer0_overflow_count+0x3>
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	a1 1d       	adc	r26, r1
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	80 93 6f 08 	sts	0x086F, r24	; 0x80086f <timer0_overflow_count>
    1b2e:	90 93 70 08 	sts	0x0870, r25	; 0x800870 <timer0_overflow_count+0x1>
    1b32:	a0 93 71 08 	sts	0x0871, r26	; 0x800871 <timer0_overflow_count+0x2>
    1b36:	b0 93 72 08 	sts	0x0872, r27	; 0x800872 <timer0_overflow_count+0x3>
}
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1b50:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1b52:	f8 94       	cli
	m = timer0_millis;
    1b54:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <timer0_millis>
    1b58:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <timer0_millis+0x1>
    1b5c:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <timer0_millis+0x2>
    1b60:	90 91 6e 08 	lds	r25, 0x086E	; 0x80086e <timer0_millis+0x3>
	SREG = oldSREG;
    1b64:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1b66:	08 95       	ret

00001b68 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1b68:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1b6a:	f8 94       	cli
	m = timer0_overflow_count;
    1b6c:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <timer0_overflow_count>
    1b70:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <timer0_overflow_count+0x1>
    1b74:	a0 91 71 08 	lds	r26, 0x0871	; 0x800871 <timer0_overflow_count+0x2>
    1b78:	b0 91 72 08 	lds	r27, 0x0872	; 0x800872 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1b7c:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1b7e:	a8 9b       	sbis	0x15, 0	; 21
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <micros+0x24>
    1b82:	2f 3f       	cpi	r18, 0xFF	; 255
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <micros+0x24>
		m++;
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1b8c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1b8e:	ba 2f       	mov	r27, r26
    1b90:	a9 2f       	mov	r26, r25
    1b92:	98 2f       	mov	r25, r24
    1b94:	88 27       	eor	r24, r24
    1b96:	82 0f       	add	r24, r18
    1b98:	91 1d       	adc	r25, r1
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	b1 1d       	adc	r27, r1
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	42 e0       	ldi	r20, 0x02	; 2
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	4a 95       	dec	r20
    1bae:	d1 f7       	brne	.-12     	; 0x1ba4 <micros+0x3c>
}
    1bb0:	08 95       	ret

00001bb2 <delay>:

void delay(unsigned long ms)
{
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	6b 01       	movw	r12, r22
    1bc0:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    1bc2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <micros>
    1bc6:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1bc8:	c1 14       	cp	r12, r1
    1bca:	d1 04       	cpc	r13, r1
    1bcc:	e1 04       	cpc	r14, r1
    1bce:	f1 04       	cpc	r15, r1
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <delay+0x42>
		yield();
    1bd2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    1bd6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <micros>
    1bda:	6c 1b       	sub	r22, r28
    1bdc:	7d 0b       	sbc	r23, r29
    1bde:	68 3e       	cpi	r22, 0xE8	; 232
    1be0:	73 40       	sbci	r23, 0x03	; 3
    1be2:	90 f3       	brcs	.-28     	; 0x1bc8 <delay+0x16>
			ms--;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	c8 1a       	sub	r12, r24
    1be8:	d1 08       	sbc	r13, r1
    1bea:	e1 08       	sbc	r14, r1
    1bec:	f1 08       	sbc	r15, r1
			start += 1000;
    1bee:	c8 51       	subi	r28, 0x18	; 24
    1bf0:	dc 4f       	sbci	r29, 0xFC	; 252
    1bf2:	ea cf       	rjmp	.-44     	; 0x1bc8 <delay+0x16>
		}
	}
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	08 95       	ret

00001c02 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	39 f0       	breq	.+14     	; 0x1c14 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1c0e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <delayMicroseconds+0xe>
    1c14:	08 95       	ret

00001c16 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1c16:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1c18:	84 b5       	in	r24, 0x24	; 36
    1c1a:	82 60       	ori	r24, 0x02	; 2
    1c1c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1c1e:	84 b5       	in	r24, 0x24	; 36
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1c24:	85 b5       	in	r24, 0x25	; 37
    1c26:	82 60       	ori	r24, 0x02	; 2
    1c28:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1c2a:	85 b5       	in	r24, 0x25	; 37
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1c30:	ee e6       	ldi	r30, 0x6E	; 110
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1c3a:	e1 e8       	ldi	r30, 0x81	; 129
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1c40:	80 81       	ld	r24, Z
    1c42:	82 60       	ori	r24, 0x02	; 2
    1c44:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1c46:	80 81       	ld	r24, Z
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1c4c:	e0 e8       	ldi	r30, 0x80	; 128
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	81 60       	ori	r24, 0x01	; 1
    1c54:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1c56:	e1 eb       	ldi	r30, 0xB1	; 177
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	84 60       	ori	r24, 0x04	; 4
    1c5e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1c60:	e0 eb       	ldi	r30, 0xB0	; 176
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1c6a:	ea e7       	ldi	r30, 0x7A	; 122
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	84 60       	ori	r24, 0x04	; 4
    1c72:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1c74:	80 81       	ld	r24, Z
    1c76:	82 60       	ori	r24, 0x02	; 2
    1c78:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1c7a:	80 81       	ld	r24, Z
    1c7c:	81 60       	ori	r24, 0x01	; 1
    1c7e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c80:	80 81       	ld	r24, Z
    1c82:	80 68       	ori	r24, 0x80	; 128
    1c84:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c86:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1c8a:	08 95       	ret

00001c8c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <turnOffPWM+0x24>
    1c90:	28 f4       	brcc	.+10     	; 0x1c9c <turnOffPWM+0x10>
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	99 f0       	breq	.+38     	; 0x1cbc <turnOffPWM+0x30>
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	a1 f0       	breq	.+40     	; 0x1cc2 <turnOffPWM+0x36>
    1c9a:	08 95       	ret
    1c9c:	86 30       	cpi	r24, 0x06	; 6
    1c9e:	a9 f0       	breq	.+42     	; 0x1cca <turnOffPWM+0x3e>
    1ca0:	87 30       	cpi	r24, 0x07	; 7
    1ca2:	b9 f0       	breq	.+46     	; 0x1cd2 <turnOffPWM+0x46>
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	d1 f4       	brne	.+52     	; 0x1cdc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1ca8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1cac:	8f 7d       	andi	r24, 0xDF	; 223
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1cb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1cb4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1cb6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1cba:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1cbc:	84 b5       	in	r24, 0x24	; 36
    1cbe:	8f 77       	andi	r24, 0x7F	; 127
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1cc2:	84 b5       	in	r24, 0x24	; 36
    1cc4:	8f 7d       	andi	r24, 0xDF	; 223
    1cc6:	84 bd       	out	0x24, r24	; 36
    1cc8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1cca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cce:	8f 77       	andi	r24, 0x7F	; 127
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1cd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cdc:	08 95       	ret

00001cde <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	ee 51       	subi	r30, 0x1E	; 30
    1ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cea:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1cec:	fc 01       	movw	r30, r24
    1cee:	ea 50       	subi	r30, 0x0A	; 10
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1cf4:	88 23       	and	r24, r24
    1cf6:	61 f1       	breq	.+88     	; 0x1d50 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	fc 01       	movw	r30, r24
    1d00:	ec 5e       	subi	r30, 0xEC	; 236
    1d02:	fd 4f       	sbci	r31, 0xFD	; 253
    1d04:	c5 91       	lpm	r28, Z+
    1d06:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e6 5f       	subi	r30, 0xF6	; 246
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	a5 91       	lpm	r26, Z+
    1d10:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1d12:	61 11       	cpse	r22, r1
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1d16:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d18:	f8 94       	cli
		*reg &= ~bit;
    1d1a:	88 81       	ld	r24, Y
    1d1c:	20 95       	com	r18
    1d1e:	82 23       	and	r24, r18
    1d20:	88 83       	st	Y, r24
		*out &= ~bit;
    1d22:	ec 91       	ld	r30, X
    1d24:	2e 23       	and	r18, r30
    1d26:	0b c0       	rjmp	.+22     	; 0x1d3e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1d28:	62 30       	cpi	r22, 0x02	; 2
    1d2a:	61 f4       	brne	.+24     	; 0x1d44 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1d2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d2e:	f8 94       	cli
		*reg &= ~bit;
    1d30:	88 81       	ld	r24, Y
    1d32:	32 2f       	mov	r19, r18
    1d34:	30 95       	com	r19
    1d36:	83 23       	and	r24, r19
    1d38:	88 83       	st	Y, r24
		*out |= bit;
    1d3a:	ec 91       	ld	r30, X
    1d3c:	2e 2b       	or	r18, r30
    1d3e:	2c 93       	st	X, r18
		SREG = oldSREG;
    1d40:	9f bf       	out	0x3f, r25	; 63
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1d44:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1d46:	f8 94       	cli
		*reg |= bit;
    1d48:	e8 81       	ld	r30, Y
    1d4a:	2e 2b       	or	r18, r30
    1d4c:	28 83       	st	Y, r18
		SREG = oldSREG;
    1d4e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	f9 01       	movw	r30, r18
    1d62:	e2 53       	subi	r30, 0x32	; 50
    1d64:	fe 4f       	sbci	r31, 0xFE	; 254
    1d66:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d68:	f9 01       	movw	r30, r18
    1d6a:	ee 51       	subi	r30, 0x1E	; 30
    1d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1d70:	f9 01       	movw	r30, r18
    1d72:	ea 50       	subi	r30, 0x0A	; 10
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1d78:	cc 23       	and	r28, r28
    1d7a:	c1 f0       	breq	.+48     	; 0x1dac <digitalWrite+0x56>
    1d7c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d7e:	81 11       	cpse	r24, r1
    1d80:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <turnOffPWM>

	out = portOutputRegister(port);
    1d84:	ec 2f       	mov	r30, r28
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	e6 5f       	subi	r30, 0xF6	; 246
    1d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d90:	a5 91       	lpm	r26, Z+
    1d92:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1d94:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1d96:	f8 94       	cli

	if (val == LOW) {
    1d98:	11 11       	cpse	r17, r1
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <digitalWrite+0x4e>
		*out &= ~bit;
    1d9c:	8c 91       	ld	r24, X
    1d9e:	d0 95       	com	r29
    1da0:	d8 23       	and	r29, r24
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1da4:	ec 91       	ld	r30, X
    1da6:	de 2b       	or	r29, r30
    1da8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1daa:	9f bf       	out	0x3f, r25	; 63
}
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	08 95       	ret

00001db4 <_ZN8SPIClass5beginEv>:
  pinMode(MOSI, OUTPUT);
}


void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <digitalWrite>
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <pinMode>
    1dc4:	8c b5       	in	r24, 0x2c	; 44
    1dc6:	80 61       	ori	r24, 0x10	; 16
    1dc8:	8c bd       	out	0x2c, r24	; 44
    1dca:	8c b5       	in	r24, 0x2c	; 44
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c bd       	out	0x2c, r24	; 44
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	8d e0       	ldi	r24, 0x0D	; 13
    1dd4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <pinMode>
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	8b e0       	ldi	r24, 0x0B	; 11
    1ddc:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <pinMode>

00001de0 <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    1de0:	81 11       	cpse	r24, r1
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    1de4:	8c b5       	in	r24, 0x2c	; 44
    1de6:	80 62       	ori	r24, 0x20	; 32
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    1dea:	8c b5       	in	r24, 0x2c	; 44
    1dec:	8f 7d       	andi	r24, 0xDF	; 223
    1dee:	8c bd       	out	0x2c, r24	; 44
    1df0:	08 95       	ret

00001df2 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1df2:	9c b5       	in	r25, 0x2c	; 44
    1df4:	93 7f       	andi	r25, 0xF3	; 243
    1df6:	89 2b       	or	r24, r25
    1df8:	8c bd       	out	0x2c, r24	; 44
    1dfa:	08 95       	ret

00001dfc <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    1dfc:	9c b5       	in	r25, 0x2c	; 44
    1dfe:	9c 7f       	andi	r25, 0xFC	; 252
    1e00:	28 2f       	mov	r18, r24
    1e02:	23 70       	andi	r18, 0x03	; 3
    1e04:	92 2b       	or	r25, r18
    1e06:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1e08:	2d b5       	in	r18, 0x2d	; 45
    1e0a:	82 fb       	bst	r24, 2
    1e0c:	99 27       	eor	r25, r25
    1e0e:	90 f9       	bld	r25, 0
    1e10:	82 2f       	mov	r24, r18
    1e12:	8e 7f       	andi	r24, 0xFE	; 254
    1e14:	89 2b       	or	r24, r25
    1e16:	8d bd       	out	0x2d, r24	; 45
    1e18:	08 95       	ret

00001e1a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1e1a:	08 95       	ret

00001e1c <__cmpsf2>:
    1e1c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_cmp>
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <__cmpsf2+0x8>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	08 95       	ret

00001e26 <__divsf3>:
    1e26:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divsf3x>
    1e2a:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>
    1e2e:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
    1e32:	58 f0       	brcs	.+22     	; 0x1e4a <__divsf3+0x24>
    1e34:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
    1e38:	40 f0       	brcs	.+16     	; 0x1e4a <__divsf3+0x24>
    1e3a:	29 f4       	brne	.+10     	; 0x1e46 <__divsf3+0x20>
    1e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <__divsf3+0x24>
    1e40:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
    1e44:	51 11       	cpse	r21, r1
    1e46:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
    1e4a:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>

00001e4e <__divsf3x>:
    1e4e:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_split3>
    1e52:	68 f3       	brcs	.-38     	; 0x1e2e <__divsf3+0x8>

00001e54 <__divsf3_pse>:
    1e54:	99 23       	and	r25, r25
    1e56:	b1 f3       	breq	.-20     	; 0x1e44 <__divsf3+0x1e>
    1e58:	55 23       	and	r21, r21
    1e5a:	91 f3       	breq	.-28     	; 0x1e40 <__divsf3+0x1a>
    1e5c:	95 1b       	sub	r25, r21
    1e5e:	55 0b       	sbc	r21, r21
    1e60:	bb 27       	eor	r27, r27
    1e62:	aa 27       	eor	r26, r26
    1e64:	62 17       	cp	r22, r18
    1e66:	73 07       	cpc	r23, r19
    1e68:	84 07       	cpc	r24, r20
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <__divsf3_pse+0x26>
    1e6c:	9f 5f       	subi	r25, 0xFF	; 255
    1e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	44 1f       	adc	r20, r20
    1e76:	aa 1f       	adc	r26, r26
    1e78:	a9 f3       	breq	.-22     	; 0x1e64 <__divsf3_pse+0x10>
    1e7a:	35 d0       	rcall	.+106    	; 0x1ee6 <__divsf3_pse+0x92>
    1e7c:	0e 2e       	mov	r0, r30
    1e7e:	3a f0       	brmi	.+14     	; 0x1e8e <__divsf3_pse+0x3a>
    1e80:	e0 e8       	ldi	r30, 0x80	; 128
    1e82:	32 d0       	rcall	.+100    	; 0x1ee8 <__divsf3_pse+0x94>
    1e84:	91 50       	subi	r25, 0x01	; 1
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	e6 95       	lsr	r30
    1e8a:	00 1c       	adc	r0, r0
    1e8c:	ca f7       	brpl	.-14     	; 0x1e80 <__divsf3_pse+0x2c>
    1e8e:	2b d0       	rcall	.+86     	; 0x1ee6 <__divsf3_pse+0x92>
    1e90:	fe 2f       	mov	r31, r30
    1e92:	29 d0       	rcall	.+82     	; 0x1ee6 <__divsf3_pse+0x92>
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	26 17       	cp	r18, r22
    1e9e:	37 07       	cpc	r19, r23
    1ea0:	48 07       	cpc	r20, r24
    1ea2:	ab 07       	cpc	r26, r27
    1ea4:	b0 e8       	ldi	r27, 0x80	; 128
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <__divsf3_pse+0x56>
    1ea8:	bb 0b       	sbc	r27, r27
    1eaa:	80 2d       	mov	r24, r0
    1eac:	bf 01       	movw	r22, r30
    1eae:	ff 27       	eor	r31, r31
    1eb0:	93 58       	subi	r25, 0x83	; 131
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	3a f0       	brmi	.+14     	; 0x1ec4 <__divsf3_pse+0x70>
    1eb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb8:	51 05       	cpc	r21, r1
    1eba:	78 f0       	brcs	.+30     	; 0x1eda <__divsf3_pse+0x86>
    1ebc:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
    1ec0:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
    1ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec6:	e4 f3       	brlt	.-8      	; 0x1ec0 <__divsf3_pse+0x6c>
    1ec8:	98 3e       	cpi	r25, 0xE8	; 232
    1eca:	d4 f3       	brlt	.-12     	; 0x1ec0 <__divsf3_pse+0x6c>
    1ecc:	86 95       	lsr	r24
    1ece:	77 95       	ror	r23
    1ed0:	67 95       	ror	r22
    1ed2:	b7 95       	ror	r27
    1ed4:	f7 95       	ror	r31
    1ed6:	9f 5f       	subi	r25, 0xFF	; 255
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__divsf3_pse+0x78>
    1eda:	88 0f       	add	r24, r24
    1edc:	91 1d       	adc	r25, r1
    1ede:	96 95       	lsr	r25
    1ee0:	87 95       	ror	r24
    1ee2:	97 f9       	bld	r25, 7
    1ee4:	08 95       	ret
    1ee6:	e1 e0       	ldi	r30, 0x01	; 1
    1ee8:	66 0f       	add	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	88 1f       	adc	r24, r24
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	62 17       	cp	r22, r18
    1ef2:	73 07       	cpc	r23, r19
    1ef4:	84 07       	cpc	r24, r20
    1ef6:	ba 07       	cpc	r27, r26
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__divsf3_pse+0xae>
    1efa:	62 1b       	sub	r22, r18
    1efc:	73 0b       	sbc	r23, r19
    1efe:	84 0b       	sbc	r24, r20
    1f00:	ba 0b       	sbc	r27, r26
    1f02:	ee 1f       	adc	r30, r30
    1f04:	88 f7       	brcc	.-30     	; 0x1ee8 <__divsf3_pse+0x94>
    1f06:	e0 95       	com	r30
    1f08:	08 95       	ret

00001f0a <__fixsfsi>:
    1f0a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__fixunssfsi>
    1f0e:	68 94       	set
    1f10:	b1 11       	cpse	r27, r1
    1f12:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
    1f16:	08 95       	ret

00001f18 <__fixunssfsi>:
    1f18:	0e 94 c6 08 	call	0x118c	; 0x118c <__fp_splitA>
    1f1c:	88 f0       	brcs	.+34     	; 0x1f40 <__fixunssfsi+0x28>
    1f1e:	9f 57       	subi	r25, 0x7F	; 127
    1f20:	98 f0       	brcs	.+38     	; 0x1f48 <__fixunssfsi+0x30>
    1f22:	b9 2f       	mov	r27, r25
    1f24:	99 27       	eor	r25, r25
    1f26:	b7 51       	subi	r27, 0x17	; 23
    1f28:	b0 f0       	brcs	.+44     	; 0x1f56 <__fixunssfsi+0x3e>
    1f2a:	e1 f0       	breq	.+56     	; 0x1f64 <__fixunssfsi+0x4c>
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	1a f0       	brmi	.+6      	; 0x1f3c <__fixunssfsi+0x24>
    1f36:	ba 95       	dec	r27
    1f38:	c9 f7       	brne	.-14     	; 0x1f2c <__fixunssfsi+0x14>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <__fixunssfsi+0x4c>
    1f3c:	b1 30       	cpi	r27, 0x01	; 1
    1f3e:	91 f0       	breq	.+36     	; 0x1f64 <__fixunssfsi+0x4c>
    1f40:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_zero>
    1f44:	b1 e0       	ldi	r27, 0x01	; 1
    1f46:	08 95       	ret
    1f48:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_zero>
    1f4c:	67 2f       	mov	r22, r23
    1f4e:	78 2f       	mov	r23, r24
    1f50:	88 27       	eor	r24, r24
    1f52:	b8 5f       	subi	r27, 0xF8	; 248
    1f54:	39 f0       	breq	.+14     	; 0x1f64 <__fixunssfsi+0x4c>
    1f56:	b9 3f       	cpi	r27, 0xF9	; 249
    1f58:	cc f3       	brlt	.-14     	; 0x1f4c <__fixunssfsi+0x34>
    1f5a:	86 95       	lsr	r24
    1f5c:	77 95       	ror	r23
    1f5e:	67 95       	ror	r22
    1f60:	b3 95       	inc	r27
    1f62:	d9 f7       	brne	.-10     	; 0x1f5a <__fixunssfsi+0x42>
    1f64:	3e f4       	brtc	.+14     	; 0x1f74 <__fixunssfsi+0x5c>
    1f66:	90 95       	com	r25
    1f68:	80 95       	com	r24
    1f6a:	70 95       	com	r23
    1f6c:	61 95       	neg	r22
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	8f 4f       	sbci	r24, 0xFF	; 255
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	08 95       	ret

00001f76 <__fp_cmp>:
    1f76:	99 0f       	add	r25, r25
    1f78:	00 08       	sbc	r0, r0
    1f7a:	55 0f       	add	r21, r21
    1f7c:	aa 0b       	sbc	r26, r26
    1f7e:	e0 e8       	ldi	r30, 0x80	; 128
    1f80:	fe ef       	ldi	r31, 0xFE	; 254
    1f82:	16 16       	cp	r1, r22
    1f84:	17 06       	cpc	r1, r23
    1f86:	e8 07       	cpc	r30, r24
    1f88:	f9 07       	cpc	r31, r25
    1f8a:	c0 f0       	brcs	.+48     	; 0x1fbc <__fp_cmp+0x46>
    1f8c:	12 16       	cp	r1, r18
    1f8e:	13 06       	cpc	r1, r19
    1f90:	e4 07       	cpc	r30, r20
    1f92:	f5 07       	cpc	r31, r21
    1f94:	98 f0       	brcs	.+38     	; 0x1fbc <__fp_cmp+0x46>
    1f96:	62 1b       	sub	r22, r18
    1f98:	73 0b       	sbc	r23, r19
    1f9a:	84 0b       	sbc	r24, r20
    1f9c:	95 0b       	sbc	r25, r21
    1f9e:	39 f4       	brne	.+14     	; 0x1fae <__fp_cmp+0x38>
    1fa0:	0a 26       	eor	r0, r26
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <__fp_cmp+0x46>
    1fa4:	23 2b       	or	r18, r19
    1fa6:	24 2b       	or	r18, r20
    1fa8:	25 2b       	or	r18, r21
    1faa:	21 f4       	brne	.+8      	; 0x1fb4 <__fp_cmp+0x3e>
    1fac:	08 95       	ret
    1fae:	0a 26       	eor	r0, r26
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <__fp_cmp+0x3e>
    1fb2:	a1 40       	sbci	r26, 0x01	; 1
    1fb4:	a6 95       	lsr	r26
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	81 1d       	adc	r24, r1
    1fba:	81 1d       	adc	r24, r1
    1fbc:	08 95       	ret

00001fbe <__gesf2>:
    1fbe:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_cmp>
    1fc2:	08 f4       	brcc	.+2      	; 0x1fc6 <__gesf2+0x8>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	08 95       	ret

00001fc8 <__unordsf2>:
    1fc8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_cmp>
    1fcc:	88 0b       	sbc	r24, r24
    1fce:	99 0b       	sbc	r25, r25
    1fd0:	08 95       	ret

00001fd2 <vfprintf>:
    1fd2:	a0 e1       	ldi	r26, 0x10	; 16
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ef ee       	ldi	r30, 0xEF	; 239
    1fd8:	ff e0       	ldi	r31, 0x0F	; 15
    1fda:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__prologue_saves__>
    1fde:	7c 01       	movw	r14, r24
    1fe0:	1b 01       	movw	r2, r22
    1fe2:	6a 01       	movw	r12, r20
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	17 82       	std	Z+7, r1	; 0x07
    1fe8:	16 82       	std	Z+6, r1	; 0x06
    1fea:	83 81       	ldd	r24, Z+3	; 0x03
    1fec:	81 ff       	sbrs	r24, 1
    1fee:	44 c3       	rjmp	.+1672   	; 0x2678 <vfprintf+0x6a6>
    1ff0:	9e 01       	movw	r18, r28
    1ff2:	2f 5f       	subi	r18, 0xFF	; 255
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	39 01       	movw	r6, r18
    1ff8:	f7 01       	movw	r30, r14
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	f1 01       	movw	r30, r2
    1ffe:	93 fd       	sbrc	r25, 3
    2000:	85 91       	lpm	r24, Z+
    2002:	93 ff       	sbrs	r25, 3
    2004:	81 91       	ld	r24, Z+
    2006:	1f 01       	movw	r2, r30
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <vfprintf+0x3c>
    200c:	31 c3       	rjmp	.+1634   	; 0x2670 <vfprintf+0x69e>
    200e:	85 32       	cpi	r24, 0x25	; 37
    2010:	39 f4       	brne	.+14     	; 0x2020 <vfprintf+0x4e>
    2012:	93 fd       	sbrc	r25, 3
    2014:	85 91       	lpm	r24, Z+
    2016:	93 ff       	sbrs	r25, 3
    2018:	81 91       	ld	r24, Z+
    201a:	1f 01       	movw	r2, r30
    201c:	85 32       	cpi	r24, 0x25	; 37
    201e:	39 f4       	brne	.+14     	; 0x202e <vfprintf+0x5c>
    2020:	b7 01       	movw	r22, r14
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2028:	56 01       	movw	r10, r12
    202a:	65 01       	movw	r12, r10
    202c:	e5 cf       	rjmp	.-54     	; 0x1ff8 <vfprintf+0x26>
    202e:	10 e0       	ldi	r17, 0x00	; 0
    2030:	51 2c       	mov	r5, r1
    2032:	91 2c       	mov	r9, r1
    2034:	ff e1       	ldi	r31, 0x1F	; 31
    2036:	f9 15       	cp	r31, r9
    2038:	d8 f0       	brcs	.+54     	; 0x2070 <vfprintf+0x9e>
    203a:	8b 32       	cpi	r24, 0x2B	; 43
    203c:	79 f0       	breq	.+30     	; 0x205c <vfprintf+0x8a>
    203e:	38 f4       	brcc	.+14     	; 0x204e <vfprintf+0x7c>
    2040:	80 32       	cpi	r24, 0x20	; 32
    2042:	79 f0       	breq	.+30     	; 0x2062 <vfprintf+0x90>
    2044:	83 32       	cpi	r24, 0x23	; 35
    2046:	a1 f4       	brne	.+40     	; 0x2070 <vfprintf+0x9e>
    2048:	f9 2d       	mov	r31, r9
    204a:	f0 61       	ori	r31, 0x10	; 16
    204c:	2e c0       	rjmp	.+92     	; 0x20aa <vfprintf+0xd8>
    204e:	8d 32       	cpi	r24, 0x2D	; 45
    2050:	61 f0       	breq	.+24     	; 0x206a <vfprintf+0x98>
    2052:	80 33       	cpi	r24, 0x30	; 48
    2054:	69 f4       	brne	.+26     	; 0x2070 <vfprintf+0x9e>
    2056:	29 2d       	mov	r18, r9
    2058:	21 60       	ori	r18, 0x01	; 1
    205a:	2d c0       	rjmp	.+90     	; 0x20b6 <vfprintf+0xe4>
    205c:	39 2d       	mov	r19, r9
    205e:	32 60       	ori	r19, 0x02	; 2
    2060:	93 2e       	mov	r9, r19
    2062:	89 2d       	mov	r24, r9
    2064:	84 60       	ori	r24, 0x04	; 4
    2066:	98 2e       	mov	r9, r24
    2068:	2a c0       	rjmp	.+84     	; 0x20be <vfprintf+0xec>
    206a:	e9 2d       	mov	r30, r9
    206c:	e8 60       	ori	r30, 0x08	; 8
    206e:	15 c0       	rjmp	.+42     	; 0x209a <vfprintf+0xc8>
    2070:	97 fc       	sbrc	r9, 7
    2072:	2d c0       	rjmp	.+90     	; 0x20ce <vfprintf+0xfc>
    2074:	20 ed       	ldi	r18, 0xD0	; 208
    2076:	28 0f       	add	r18, r24
    2078:	2a 30       	cpi	r18, 0x0A	; 10
    207a:	88 f4       	brcc	.+34     	; 0x209e <vfprintf+0xcc>
    207c:	96 fe       	sbrs	r9, 6
    207e:	06 c0       	rjmp	.+12     	; 0x208c <vfprintf+0xba>
    2080:	3a e0       	ldi	r19, 0x0A	; 10
    2082:	13 9f       	mul	r17, r19
    2084:	20 0d       	add	r18, r0
    2086:	11 24       	eor	r1, r1
    2088:	12 2f       	mov	r17, r18
    208a:	19 c0       	rjmp	.+50     	; 0x20be <vfprintf+0xec>
    208c:	8a e0       	ldi	r24, 0x0A	; 10
    208e:	58 9e       	mul	r5, r24
    2090:	20 0d       	add	r18, r0
    2092:	11 24       	eor	r1, r1
    2094:	52 2e       	mov	r5, r18
    2096:	e9 2d       	mov	r30, r9
    2098:	e0 62       	ori	r30, 0x20	; 32
    209a:	9e 2e       	mov	r9, r30
    209c:	10 c0       	rjmp	.+32     	; 0x20be <vfprintf+0xec>
    209e:	8e 32       	cpi	r24, 0x2E	; 46
    20a0:	31 f4       	brne	.+12     	; 0x20ae <vfprintf+0xdc>
    20a2:	96 fc       	sbrc	r9, 6
    20a4:	e5 c2       	rjmp	.+1482   	; 0x2670 <vfprintf+0x69e>
    20a6:	f9 2d       	mov	r31, r9
    20a8:	f0 64       	ori	r31, 0x40	; 64
    20aa:	9f 2e       	mov	r9, r31
    20ac:	08 c0       	rjmp	.+16     	; 0x20be <vfprintf+0xec>
    20ae:	8c 36       	cpi	r24, 0x6C	; 108
    20b0:	21 f4       	brne	.+8      	; 0x20ba <vfprintf+0xe8>
    20b2:	29 2d       	mov	r18, r9
    20b4:	20 68       	ori	r18, 0x80	; 128
    20b6:	92 2e       	mov	r9, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <vfprintf+0xec>
    20ba:	88 36       	cpi	r24, 0x68	; 104
    20bc:	41 f4       	brne	.+16     	; 0x20ce <vfprintf+0xfc>
    20be:	f1 01       	movw	r30, r2
    20c0:	93 fd       	sbrc	r25, 3
    20c2:	85 91       	lpm	r24, Z+
    20c4:	93 ff       	sbrs	r25, 3
    20c6:	81 91       	ld	r24, Z+
    20c8:	1f 01       	movw	r2, r30
    20ca:	81 11       	cpse	r24, r1
    20cc:	b3 cf       	rjmp	.-154    	; 0x2034 <vfprintf+0x62>
    20ce:	9b eb       	ldi	r25, 0xBB	; 187
    20d0:	98 0f       	add	r25, r24
    20d2:	93 30       	cpi	r25, 0x03	; 3
    20d4:	20 f4       	brcc	.+8      	; 0x20de <vfprintf+0x10c>
    20d6:	99 2d       	mov	r25, r9
    20d8:	90 61       	ori	r25, 0x10	; 16
    20da:	80 5e       	subi	r24, 0xE0	; 224
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <vfprintf+0x11a>
    20de:	9b e9       	ldi	r25, 0x9B	; 155
    20e0:	98 0f       	add	r25, r24
    20e2:	93 30       	cpi	r25, 0x03	; 3
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <vfprintf+0x116>
    20e6:	66 c1       	rjmp	.+716    	; 0x23b4 <vfprintf+0x3e2>
    20e8:	99 2d       	mov	r25, r9
    20ea:	9f 7e       	andi	r25, 0xEF	; 239
    20ec:	96 ff       	sbrs	r25, 6
    20ee:	16 e0       	ldi	r17, 0x06	; 6
    20f0:	9f 73       	andi	r25, 0x3F	; 63
    20f2:	99 2e       	mov	r9, r25
    20f4:	85 36       	cpi	r24, 0x65	; 101
    20f6:	19 f4       	brne	.+6      	; 0x20fe <vfprintf+0x12c>
    20f8:	90 64       	ori	r25, 0x40	; 64
    20fa:	99 2e       	mov	r9, r25
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <vfprintf+0x13c>
    20fe:	86 36       	cpi	r24, 0x66	; 102
    2100:	21 f4       	brne	.+8      	; 0x210a <vfprintf+0x138>
    2102:	39 2f       	mov	r19, r25
    2104:	30 68       	ori	r19, 0x80	; 128
    2106:	93 2e       	mov	r9, r19
    2108:	02 c0       	rjmp	.+4      	; 0x210e <vfprintf+0x13c>
    210a:	11 11       	cpse	r17, r1
    210c:	11 50       	subi	r17, 0x01	; 1
    210e:	97 fe       	sbrs	r9, 7
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <vfprintf+0x14e>
    2112:	1c 33       	cpi	r17, 0x3C	; 60
    2114:	50 f4       	brcc	.+20     	; 0x212a <vfprintf+0x158>
    2116:	44 24       	eor	r4, r4
    2118:	43 94       	inc	r4
    211a:	41 0e       	add	r4, r17
    211c:	27 e0       	ldi	r18, 0x07	; 7
    211e:	0b c0       	rjmp	.+22     	; 0x2136 <vfprintf+0x164>
    2120:	18 30       	cpi	r17, 0x08	; 8
    2122:	38 f0       	brcs	.+14     	; 0x2132 <vfprintf+0x160>
    2124:	27 e0       	ldi	r18, 0x07	; 7
    2126:	17 e0       	ldi	r17, 0x07	; 7
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <vfprintf+0x162>
    212a:	27 e0       	ldi	r18, 0x07	; 7
    212c:	9c e3       	ldi	r25, 0x3C	; 60
    212e:	49 2e       	mov	r4, r25
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <vfprintf+0x164>
    2132:	21 2f       	mov	r18, r17
    2134:	41 2c       	mov	r4, r1
    2136:	56 01       	movw	r10, r12
    2138:	84 e0       	ldi	r24, 0x04	; 4
    213a:	a8 0e       	add	r10, r24
    213c:	b1 1c       	adc	r11, r1
    213e:	f6 01       	movw	r30, r12
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	04 2d       	mov	r16, r4
    214a:	a3 01       	movw	r20, r6
    214c:	0e 94 ed 13 	call	0x27da	; 0x27da <__ftoa_engine>
    2150:	6c 01       	movw	r12, r24
    2152:	f9 81       	ldd	r31, Y+1	; 0x01
    2154:	fc 87       	std	Y+12, r31	; 0x0c
    2156:	f0 ff       	sbrs	r31, 0
    2158:	02 c0       	rjmp	.+4      	; 0x215e <vfprintf+0x18c>
    215a:	f3 ff       	sbrs	r31, 3
    215c:	06 c0       	rjmp	.+12     	; 0x216a <vfprintf+0x198>
    215e:	91 fc       	sbrc	r9, 1
    2160:	06 c0       	rjmp	.+12     	; 0x216e <vfprintf+0x19c>
    2162:	92 fe       	sbrs	r9, 2
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x1a0>
    2166:	00 e2       	ldi	r16, 0x20	; 32
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <vfprintf+0x1a2>
    216a:	0d e2       	ldi	r16, 0x2D	; 45
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <vfprintf+0x1a2>
    216e:	0b e2       	ldi	r16, 0x2B	; 43
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <vfprintf+0x1a2>
    2172:	00 e0       	ldi	r16, 0x00	; 0
    2174:	8c 85       	ldd	r24, Y+12	; 0x0c
    2176:	8c 70       	andi	r24, 0x0C	; 12
    2178:	19 f0       	breq	.+6      	; 0x2180 <vfprintf+0x1ae>
    217a:	01 11       	cpse	r16, r1
    217c:	5a c2       	rjmp	.+1204   	; 0x2632 <vfprintf+0x660>
    217e:	9b c2       	rjmp	.+1334   	; 0x26b6 <vfprintf+0x6e4>
    2180:	97 fe       	sbrs	r9, 7
    2182:	10 c0       	rjmp	.+32     	; 0x21a4 <vfprintf+0x1d2>
    2184:	4c 0c       	add	r4, r12
    2186:	fc 85       	ldd	r31, Y+12	; 0x0c
    2188:	f4 ff       	sbrs	r31, 4
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <vfprintf+0x1c2>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	81 33       	cpi	r24, 0x31	; 49
    2190:	09 f4       	brne	.+2      	; 0x2194 <vfprintf+0x1c2>
    2192:	4a 94       	dec	r4
    2194:	14 14       	cp	r1, r4
    2196:	74 f5       	brge	.+92     	; 0x21f4 <vfprintf+0x222>
    2198:	28 e0       	ldi	r18, 0x08	; 8
    219a:	24 15       	cp	r18, r4
    219c:	78 f5       	brcc	.+94     	; 0x21fc <vfprintf+0x22a>
    219e:	88 e0       	ldi	r24, 0x08	; 8
    21a0:	48 2e       	mov	r4, r24
    21a2:	2c c0       	rjmp	.+88     	; 0x21fc <vfprintf+0x22a>
    21a4:	96 fc       	sbrc	r9, 6
    21a6:	2a c0       	rjmp	.+84     	; 0x21fc <vfprintf+0x22a>
    21a8:	81 2f       	mov	r24, r17
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	8c 15       	cp	r24, r12
    21ae:	9d 05       	cpc	r25, r13
    21b0:	9c f0       	brlt	.+38     	; 0x21d8 <vfprintf+0x206>
    21b2:	3c ef       	ldi	r19, 0xFC	; 252
    21b4:	c3 16       	cp	r12, r19
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	d3 06       	cpc	r13, r19
    21ba:	74 f0       	brlt	.+28     	; 0x21d8 <vfprintf+0x206>
    21bc:	89 2d       	mov	r24, r9
    21be:	80 68       	ori	r24, 0x80	; 128
    21c0:	98 2e       	mov	r9, r24
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <vfprintf+0x206>
    21c4:	e2 e0       	ldi	r30, 0x02	; 2
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	ec 0f       	add	r30, r28
    21ca:	fd 1f       	adc	r31, r29
    21cc:	e1 0f       	add	r30, r17
    21ce:	f1 1d       	adc	r31, r1
    21d0:	80 81       	ld	r24, Z
    21d2:	80 33       	cpi	r24, 0x30	; 48
    21d4:	19 f4       	brne	.+6      	; 0x21dc <vfprintf+0x20a>
    21d6:	11 50       	subi	r17, 0x01	; 1
    21d8:	11 11       	cpse	r17, r1
    21da:	f4 cf       	rjmp	.-24     	; 0x21c4 <vfprintf+0x1f2>
    21dc:	97 fe       	sbrs	r9, 7
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <vfprintf+0x22a>
    21e0:	44 24       	eor	r4, r4
    21e2:	43 94       	inc	r4
    21e4:	41 0e       	add	r4, r17
    21e6:	81 2f       	mov	r24, r17
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	c8 16       	cp	r12, r24
    21ec:	d9 06       	cpc	r13, r25
    21ee:	2c f4       	brge	.+10     	; 0x21fa <vfprintf+0x228>
    21f0:	1c 19       	sub	r17, r12
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <vfprintf+0x22a>
    21f4:	44 24       	eor	r4, r4
    21f6:	43 94       	inc	r4
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <vfprintf+0x22a>
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	97 fe       	sbrs	r9, 7
    21fe:	06 c0       	rjmp	.+12     	; 0x220c <vfprintf+0x23a>
    2200:	1c 14       	cp	r1, r12
    2202:	1d 04       	cpc	r1, r13
    2204:	34 f4       	brge	.+12     	; 0x2212 <vfprintf+0x240>
    2206:	c6 01       	movw	r24, r12
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <vfprintf+0x244>
    220c:	85 e0       	ldi	r24, 0x05	; 5
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <vfprintf+0x244>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	01 11       	cpse	r16, r1
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	11 23       	and	r17, r17
    221c:	31 f0       	breq	.+12     	; 0x222a <vfprintf+0x258>
    221e:	21 2f       	mov	r18, r17
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	2f 5f       	subi	r18, 0xFF	; 255
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	25 2d       	mov	r18, r5
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	82 17       	cp	r24, r18
    2230:	93 07       	cpc	r25, r19
    2232:	14 f4       	brge	.+4      	; 0x2238 <vfprintf+0x266>
    2234:	58 1a       	sub	r5, r24
    2236:	01 c0       	rjmp	.+2      	; 0x223a <vfprintf+0x268>
    2238:	51 2c       	mov	r5, r1
    223a:	89 2d       	mov	r24, r9
    223c:	89 70       	andi	r24, 0x09	; 9
    223e:	49 f4       	brne	.+18     	; 0x2252 <vfprintf+0x280>
    2240:	55 20       	and	r5, r5
    2242:	39 f0       	breq	.+14     	; 0x2252 <vfprintf+0x280>
    2244:	b7 01       	movw	r22, r14
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    224e:	5a 94       	dec	r5
    2250:	f7 cf       	rjmp	.-18     	; 0x2240 <vfprintf+0x26e>
    2252:	00 23       	and	r16, r16
    2254:	29 f0       	breq	.+10     	; 0x2260 <vfprintf+0x28e>
    2256:	b7 01       	movw	r22, r14
    2258:	80 2f       	mov	r24, r16
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2260:	93 fc       	sbrc	r9, 3
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <vfprintf+0x2a4>
    2264:	55 20       	and	r5, r5
    2266:	39 f0       	breq	.+14     	; 0x2276 <vfprintf+0x2a4>
    2268:	b7 01       	movw	r22, r14
    226a:	80 e3       	ldi	r24, 0x30	; 48
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2272:	5a 94       	dec	r5
    2274:	f7 cf       	rjmp	.-18     	; 0x2264 <vfprintf+0x292>
    2276:	97 fe       	sbrs	r9, 7
    2278:	4c c0       	rjmp	.+152    	; 0x2312 <vfprintf+0x340>
    227a:	46 01       	movw	r8, r12
    227c:	d7 fe       	sbrs	r13, 7
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <vfprintf+0x2b2>
    2280:	81 2c       	mov	r8, r1
    2282:	91 2c       	mov	r9, r1
    2284:	c6 01       	movw	r24, r12
    2286:	88 19       	sub	r24, r8
    2288:	99 09       	sbc	r25, r9
    228a:	f3 01       	movw	r30, r6
    228c:	e8 0f       	add	r30, r24
    228e:	f9 1f       	adc	r31, r25
    2290:	fe 87       	std	Y+14, r31	; 0x0e
    2292:	ed 87       	std	Y+13, r30	; 0x0d
    2294:	96 01       	movw	r18, r12
    2296:	24 19       	sub	r18, r4
    2298:	31 09       	sbc	r19, r1
    229a:	38 8b       	std	Y+16, r19	; 0x10
    229c:	2f 87       	std	Y+15, r18	; 0x0f
    229e:	01 2f       	mov	r16, r17
    22a0:	10 e0       	ldi	r17, 0x00	; 0
    22a2:	11 95       	neg	r17
    22a4:	01 95       	neg	r16
    22a6:	11 09       	sbc	r17, r1
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	83 16       	cp	r8, r19
    22ac:	93 06       	cpc	r9, r19
    22ae:	29 f4       	brne	.+10     	; 0x22ba <vfprintf+0x2e8>
    22b0:	b7 01       	movw	r22, r14
    22b2:	8e e2       	ldi	r24, 0x2E	; 46
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    22ba:	c8 14       	cp	r12, r8
    22bc:	d9 04       	cpc	r13, r9
    22be:	4c f0       	brlt	.+18     	; 0x22d2 <vfprintf+0x300>
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	88 15       	cp	r24, r8
    22c6:	99 05       	cpc	r25, r9
    22c8:	24 f4       	brge	.+8      	; 0x22d2 <vfprintf+0x300>
    22ca:	ed 85       	ldd	r30, Y+13	; 0x0d
    22cc:	fe 85       	ldd	r31, Y+14	; 0x0e
    22ce:	81 81       	ldd	r24, Z+1	; 0x01
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <vfprintf+0x302>
    22d2:	80 e3       	ldi	r24, 0x30	; 48
    22d4:	f1 e0       	ldi	r31, 0x01	; 1
    22d6:	8f 1a       	sub	r8, r31
    22d8:	91 08       	sbc	r9, r1
    22da:	2d 85       	ldd	r18, Y+13	; 0x0d
    22dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	3e 87       	std	Y+14, r19	; 0x0e
    22e4:	2d 87       	std	Y+13, r18	; 0x0d
    22e6:	80 16       	cp	r8, r16
    22e8:	91 06       	cpc	r9, r17
    22ea:	2c f0       	brlt	.+10     	; 0x22f6 <vfprintf+0x324>
    22ec:	b7 01       	movw	r22, r14
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    22f4:	d9 cf       	rjmp	.-78     	; 0x22a8 <vfprintf+0x2d6>
    22f6:	c8 14       	cp	r12, r8
    22f8:	d9 04       	cpc	r13, r9
    22fa:	41 f4       	brne	.+16     	; 0x230c <vfprintf+0x33a>
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	96 33       	cpi	r25, 0x36	; 54
    2300:	20 f4       	brcc	.+8      	; 0x230a <vfprintf+0x338>
    2302:	95 33       	cpi	r25, 0x35	; 53
    2304:	19 f4       	brne	.+6      	; 0x230c <vfprintf+0x33a>
    2306:	3c 85       	ldd	r19, Y+12	; 0x0c
    2308:	34 ff       	sbrs	r19, 4
    230a:	81 e3       	ldi	r24, 0x31	; 49
    230c:	b7 01       	movw	r22, r14
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	4e c0       	rjmp	.+156    	; 0x23ae <vfprintf+0x3dc>
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	81 33       	cpi	r24, 0x31	; 49
    2316:	19 f0       	breq	.+6      	; 0x231e <vfprintf+0x34c>
    2318:	9c 85       	ldd	r25, Y+12	; 0x0c
    231a:	9f 7e       	andi	r25, 0xEF	; 239
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	b7 01       	movw	r22, r14
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2326:	11 11       	cpse	r17, r1
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <vfprintf+0x362>
    232a:	94 fc       	sbrc	r9, 4
    232c:	18 c0       	rjmp	.+48     	; 0x235e <vfprintf+0x38c>
    232e:	85 e6       	ldi	r24, 0x65	; 101
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	17 c0       	rjmp	.+46     	; 0x2362 <vfprintf+0x390>
    2334:	b7 01       	movw	r22, r14
    2336:	8e e2       	ldi	r24, 0x2E	; 46
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    233e:	1e 5f       	subi	r17, 0xFE	; 254
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	01 e0       	ldi	r16, 0x01	; 1
    2344:	08 0f       	add	r16, r24
    2346:	f3 01       	movw	r30, r6
    2348:	e8 0f       	add	r30, r24
    234a:	f1 1d       	adc	r31, r1
    234c:	80 81       	ld	r24, Z
    234e:	b7 01       	movw	r22, r14
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2356:	80 2f       	mov	r24, r16
    2358:	01 13       	cpse	r16, r17
    235a:	f3 cf       	rjmp	.-26     	; 0x2342 <vfprintf+0x370>
    235c:	e6 cf       	rjmp	.-52     	; 0x232a <vfprintf+0x358>
    235e:	85 e4       	ldi	r24, 0x45	; 69
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	b7 01       	movw	r22, r14
    2364:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2368:	d7 fc       	sbrc	r13, 7
    236a:	06 c0       	rjmp	.+12     	; 0x2378 <vfprintf+0x3a6>
    236c:	c1 14       	cp	r12, r1
    236e:	d1 04       	cpc	r13, r1
    2370:	41 f4       	brne	.+16     	; 0x2382 <vfprintf+0x3b0>
    2372:	ec 85       	ldd	r30, Y+12	; 0x0c
    2374:	e4 ff       	sbrs	r30, 4
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <vfprintf+0x3b0>
    2378:	d1 94       	neg	r13
    237a:	c1 94       	neg	r12
    237c:	d1 08       	sbc	r13, r1
    237e:	8d e2       	ldi	r24, 0x2D	; 45
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <vfprintf+0x3b2>
    2382:	8b e2       	ldi	r24, 0x2B	; 43
    2384:	b7 01       	movw	r22, r14
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    238c:	80 e3       	ldi	r24, 0x30	; 48
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	c2 16       	cp	r12, r18
    2392:	d1 04       	cpc	r13, r1
    2394:	2c f0       	brlt	.+10     	; 0x23a0 <vfprintf+0x3ce>
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	fa e0       	ldi	r31, 0x0A	; 10
    239a:	cf 1a       	sub	r12, r31
    239c:	d1 08       	sbc	r13, r1
    239e:	f7 cf       	rjmp	.-18     	; 0x238e <vfprintf+0x3bc>
    23a0:	b7 01       	movw	r22, r14
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    23a8:	b7 01       	movw	r22, r14
    23aa:	c6 01       	movw	r24, r12
    23ac:	c0 96       	adiw	r24, 0x30	; 48
    23ae:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    23b2:	54 c1       	rjmp	.+680    	; 0x265c <vfprintf+0x68a>
    23b4:	83 36       	cpi	r24, 0x63	; 99
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <vfprintf+0x3f2>
    23b8:	83 37       	cpi	r24, 0x73	; 115
    23ba:	79 f0       	breq	.+30     	; 0x23da <vfprintf+0x408>
    23bc:	83 35       	cpi	r24, 0x53	; 83
    23be:	09 f0       	breq	.+2      	; 0x23c2 <vfprintf+0x3f0>
    23c0:	56 c0       	rjmp	.+172    	; 0x246e <vfprintf+0x49c>
    23c2:	20 c0       	rjmp	.+64     	; 0x2404 <vfprintf+0x432>
    23c4:	56 01       	movw	r10, r12
    23c6:	32 e0       	ldi	r19, 0x02	; 2
    23c8:	a3 0e       	add	r10, r19
    23ca:	b1 1c       	adc	r11, r1
    23cc:	f6 01       	movw	r30, r12
    23ce:	80 81       	ld	r24, Z
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	01 e0       	ldi	r16, 0x01	; 1
    23d4:	10 e0       	ldi	r17, 0x00	; 0
    23d6:	63 01       	movw	r12, r6
    23d8:	12 c0       	rjmp	.+36     	; 0x23fe <vfprintf+0x42c>
    23da:	56 01       	movw	r10, r12
    23dc:	f2 e0       	ldi	r31, 0x02	; 2
    23de:	af 0e       	add	r10, r31
    23e0:	b1 1c       	adc	r11, r1
    23e2:	f6 01       	movw	r30, r12
    23e4:	c0 80       	ld	r12, Z
    23e6:	d1 80       	ldd	r13, Z+1	; 0x01
    23e8:	96 fe       	sbrs	r9, 6
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <vfprintf+0x420>
    23ec:	61 2f       	mov	r22, r17
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <vfprintf+0x424>
    23f2:	6f ef       	ldi	r22, 0xFF	; 255
    23f4:	7f ef       	ldi	r23, 0xFF	; 255
    23f6:	c6 01       	movw	r24, r12
    23f8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <strnlen>
    23fc:	8c 01       	movw	r16, r24
    23fe:	f9 2d       	mov	r31, r9
    2400:	ff 77       	andi	r31, 0x7F	; 127
    2402:	14 c0       	rjmp	.+40     	; 0x242c <vfprintf+0x45a>
    2404:	56 01       	movw	r10, r12
    2406:	22 e0       	ldi	r18, 0x02	; 2
    2408:	a2 0e       	add	r10, r18
    240a:	b1 1c       	adc	r11, r1
    240c:	f6 01       	movw	r30, r12
    240e:	c0 80       	ld	r12, Z
    2410:	d1 80       	ldd	r13, Z+1	; 0x01
    2412:	96 fe       	sbrs	r9, 6
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x44a>
    2416:	61 2f       	mov	r22, r17
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x44e>
    241c:	6f ef       	ldi	r22, 0xFF	; 255
    241e:	7f ef       	ldi	r23, 0xFF	; 255
    2420:	c6 01       	movw	r24, r12
    2422:	0e 94 c5 14 	call	0x298a	; 0x298a <strnlen_P>
    2426:	8c 01       	movw	r16, r24
    2428:	f9 2d       	mov	r31, r9
    242a:	f0 68       	ori	r31, 0x80	; 128
    242c:	9f 2e       	mov	r9, r31
    242e:	f3 fd       	sbrc	r31, 3
    2430:	1a c0       	rjmp	.+52     	; 0x2466 <vfprintf+0x494>
    2432:	85 2d       	mov	r24, r5
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	08 17       	cp	r16, r24
    2438:	19 07       	cpc	r17, r25
    243a:	a8 f4       	brcc	.+42     	; 0x2466 <vfprintf+0x494>
    243c:	b7 01       	movw	r22, r14
    243e:	80 e2       	ldi	r24, 0x20	; 32
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2446:	5a 94       	dec	r5
    2448:	f4 cf       	rjmp	.-24     	; 0x2432 <vfprintf+0x460>
    244a:	f6 01       	movw	r30, r12
    244c:	97 fc       	sbrc	r9, 7
    244e:	85 91       	lpm	r24, Z+
    2450:	97 fe       	sbrs	r9, 7
    2452:	81 91       	ld	r24, Z+
    2454:	6f 01       	movw	r12, r30
    2456:	b7 01       	movw	r22, r14
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    245e:	51 10       	cpse	r5, r1
    2460:	5a 94       	dec	r5
    2462:	01 50       	subi	r16, 0x01	; 1
    2464:	11 09       	sbc	r17, r1
    2466:	01 15       	cp	r16, r1
    2468:	11 05       	cpc	r17, r1
    246a:	79 f7       	brne	.-34     	; 0x244a <vfprintf+0x478>
    246c:	f7 c0       	rjmp	.+494    	; 0x265c <vfprintf+0x68a>
    246e:	84 36       	cpi	r24, 0x64	; 100
    2470:	11 f0       	breq	.+4      	; 0x2476 <vfprintf+0x4a4>
    2472:	89 36       	cpi	r24, 0x69	; 105
    2474:	61 f5       	brne	.+88     	; 0x24ce <vfprintf+0x4fc>
    2476:	56 01       	movw	r10, r12
    2478:	97 fe       	sbrs	r9, 7
    247a:	09 c0       	rjmp	.+18     	; 0x248e <vfprintf+0x4bc>
    247c:	24 e0       	ldi	r18, 0x04	; 4
    247e:	a2 0e       	add	r10, r18
    2480:	b1 1c       	adc	r11, r1
    2482:	f6 01       	movw	r30, r12
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0a c0       	rjmp	.+20     	; 0x24a2 <vfprintf+0x4d0>
    248e:	f2 e0       	ldi	r31, 0x02	; 2
    2490:	af 0e       	add	r10, r31
    2492:	b1 1c       	adc	r11, r1
    2494:	f6 01       	movw	r30, r12
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	07 2e       	mov	r0, r23
    249c:	00 0c       	add	r0, r0
    249e:	88 0b       	sbc	r24, r24
    24a0:	99 0b       	sbc	r25, r25
    24a2:	f9 2d       	mov	r31, r9
    24a4:	ff 76       	andi	r31, 0x6F	; 111
    24a6:	9f 2e       	mov	r9, r31
    24a8:	97 ff       	sbrs	r25, 7
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <vfprintf+0x4ec>
    24ac:	90 95       	com	r25
    24ae:	80 95       	com	r24
    24b0:	70 95       	com	r23
    24b2:	61 95       	neg	r22
    24b4:	7f 4f       	sbci	r23, 0xFF	; 255
    24b6:	8f 4f       	sbci	r24, 0xFF	; 255
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	f0 68       	ori	r31, 0x80	; 128
    24bc:	9f 2e       	mov	r9, r31
    24be:	2a e0       	ldi	r18, 0x0A	; 10
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	a3 01       	movw	r20, r6
    24c4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__ultoa_invert>
    24c8:	c8 2e       	mov	r12, r24
    24ca:	c6 18       	sub	r12, r6
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <vfprintf+0x57a>
    24ce:	09 2d       	mov	r16, r9
    24d0:	85 37       	cpi	r24, 0x75	; 117
    24d2:	21 f4       	brne	.+8      	; 0x24dc <vfprintf+0x50a>
    24d4:	0f 7e       	andi	r16, 0xEF	; 239
    24d6:	2a e0       	ldi	r18, 0x0A	; 10
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	1d c0       	rjmp	.+58     	; 0x2516 <vfprintf+0x544>
    24dc:	09 7f       	andi	r16, 0xF9	; 249
    24de:	8f 36       	cpi	r24, 0x6F	; 111
    24e0:	91 f0       	breq	.+36     	; 0x2506 <vfprintf+0x534>
    24e2:	18 f4       	brcc	.+6      	; 0x24ea <vfprintf+0x518>
    24e4:	88 35       	cpi	r24, 0x58	; 88
    24e6:	59 f0       	breq	.+22     	; 0x24fe <vfprintf+0x52c>
    24e8:	c3 c0       	rjmp	.+390    	; 0x2670 <vfprintf+0x69e>
    24ea:	80 37       	cpi	r24, 0x70	; 112
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <vfprintf+0x522>
    24ee:	88 37       	cpi	r24, 0x78	; 120
    24f0:	11 f0       	breq	.+4      	; 0x24f6 <vfprintf+0x524>
    24f2:	be c0       	rjmp	.+380    	; 0x2670 <vfprintf+0x69e>
    24f4:	00 61       	ori	r16, 0x10	; 16
    24f6:	04 ff       	sbrs	r16, 4
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <vfprintf+0x53a>
    24fa:	04 60       	ori	r16, 0x04	; 4
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <vfprintf+0x53a>
    24fe:	94 fe       	sbrs	r9, 4
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <vfprintf+0x540>
    2502:	06 60       	ori	r16, 0x06	; 6
    2504:	06 c0       	rjmp	.+12     	; 0x2512 <vfprintf+0x540>
    2506:	28 e0       	ldi	r18, 0x08	; 8
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <vfprintf+0x544>
    250c:	20 e1       	ldi	r18, 0x10	; 16
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <vfprintf+0x544>
    2512:	20 e1       	ldi	r18, 0x10	; 16
    2514:	32 e0       	ldi	r19, 0x02	; 2
    2516:	56 01       	movw	r10, r12
    2518:	07 ff       	sbrs	r16, 7
    251a:	09 c0       	rjmp	.+18     	; 0x252e <vfprintf+0x55c>
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	a8 0e       	add	r10, r24
    2520:	b1 1c       	adc	r11, r1
    2522:	f6 01       	movw	r30, r12
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	08 c0       	rjmp	.+16     	; 0x253e <vfprintf+0x56c>
    252e:	f2 e0       	ldi	r31, 0x02	; 2
    2530:	af 0e       	add	r10, r31
    2532:	b1 1c       	adc	r11, r1
    2534:	f6 01       	movw	r30, r12
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a3 01       	movw	r20, r6
    2540:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__ultoa_invert>
    2544:	c8 2e       	mov	r12, r24
    2546:	c6 18       	sub	r12, r6
    2548:	0f 77       	andi	r16, 0x7F	; 127
    254a:	90 2e       	mov	r9, r16
    254c:	96 fe       	sbrs	r9, 6
    254e:	0b c0       	rjmp	.+22     	; 0x2566 <vfprintf+0x594>
    2550:	09 2d       	mov	r16, r9
    2552:	0e 7f       	andi	r16, 0xFE	; 254
    2554:	c1 16       	cp	r12, r17
    2556:	50 f4       	brcc	.+20     	; 0x256c <vfprintf+0x59a>
    2558:	94 fe       	sbrs	r9, 4
    255a:	0a c0       	rjmp	.+20     	; 0x2570 <vfprintf+0x59e>
    255c:	92 fc       	sbrc	r9, 2
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <vfprintf+0x59e>
    2560:	09 2d       	mov	r16, r9
    2562:	0e 7e       	andi	r16, 0xEE	; 238
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <vfprintf+0x59e>
    2566:	dc 2c       	mov	r13, r12
    2568:	09 2d       	mov	r16, r9
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <vfprintf+0x5a0>
    256c:	dc 2c       	mov	r13, r12
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <vfprintf+0x5a0>
    2570:	d1 2e       	mov	r13, r17
    2572:	04 ff       	sbrs	r16, 4
    2574:	0d c0       	rjmp	.+26     	; 0x2590 <vfprintf+0x5be>
    2576:	fe 01       	movw	r30, r28
    2578:	ec 0d       	add	r30, r12
    257a:	f1 1d       	adc	r31, r1
    257c:	80 81       	ld	r24, Z
    257e:	80 33       	cpi	r24, 0x30	; 48
    2580:	11 f4       	brne	.+4      	; 0x2586 <vfprintf+0x5b4>
    2582:	09 7e       	andi	r16, 0xE9	; 233
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <vfprintf+0x5c6>
    2586:	02 ff       	sbrs	r16, 2
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <vfprintf+0x5c4>
    258a:	d3 94       	inc	r13
    258c:	d3 94       	inc	r13
    258e:	04 c0       	rjmp	.+8      	; 0x2598 <vfprintf+0x5c6>
    2590:	80 2f       	mov	r24, r16
    2592:	86 78       	andi	r24, 0x86	; 134
    2594:	09 f0       	breq	.+2      	; 0x2598 <vfprintf+0x5c6>
    2596:	d3 94       	inc	r13
    2598:	03 fd       	sbrc	r16, 3
    259a:	11 c0       	rjmp	.+34     	; 0x25be <vfprintf+0x5ec>
    259c:	00 ff       	sbrs	r16, 0
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <vfprintf+0x5da>
    25a0:	1c 2d       	mov	r17, r12
    25a2:	d5 14       	cp	r13, r5
    25a4:	80 f4       	brcc	.+32     	; 0x25c6 <vfprintf+0x5f4>
    25a6:	15 0d       	add	r17, r5
    25a8:	1d 19       	sub	r17, r13
    25aa:	0d c0       	rjmp	.+26     	; 0x25c6 <vfprintf+0x5f4>
    25ac:	d5 14       	cp	r13, r5
    25ae:	58 f4       	brcc	.+22     	; 0x25c6 <vfprintf+0x5f4>
    25b0:	b7 01       	movw	r22, r14
    25b2:	80 e2       	ldi	r24, 0x20	; 32
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    25ba:	d3 94       	inc	r13
    25bc:	f7 cf       	rjmp	.-18     	; 0x25ac <vfprintf+0x5da>
    25be:	d5 14       	cp	r13, r5
    25c0:	10 f4       	brcc	.+4      	; 0x25c6 <vfprintf+0x5f4>
    25c2:	5d 18       	sub	r5, r13
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <vfprintf+0x5f6>
    25c6:	51 2c       	mov	r5, r1
    25c8:	04 ff       	sbrs	r16, 4
    25ca:	10 c0       	rjmp	.+32     	; 0x25ec <vfprintf+0x61a>
    25cc:	b7 01       	movw	r22, r14
    25ce:	80 e3       	ldi	r24, 0x30	; 48
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    25d6:	02 ff       	sbrs	r16, 2
    25d8:	17 c0       	rjmp	.+46     	; 0x2608 <vfprintf+0x636>
    25da:	01 fd       	sbrc	r16, 1
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <vfprintf+0x612>
    25de:	88 e7       	ldi	r24, 0x78	; 120
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <vfprintf+0x616>
    25e4:	88 e5       	ldi	r24, 0x58	; 88
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	b7 01       	movw	r22, r14
    25ea:	0c c0       	rjmp	.+24     	; 0x2604 <vfprintf+0x632>
    25ec:	80 2f       	mov	r24, r16
    25ee:	86 78       	andi	r24, 0x86	; 134
    25f0:	59 f0       	breq	.+22     	; 0x2608 <vfprintf+0x636>
    25f2:	01 ff       	sbrs	r16, 1
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <vfprintf+0x628>
    25f6:	8b e2       	ldi	r24, 0x2B	; 43
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <vfprintf+0x62a>
    25fa:	80 e2       	ldi	r24, 0x20	; 32
    25fc:	07 fd       	sbrc	r16, 7
    25fe:	8d e2       	ldi	r24, 0x2D	; 45
    2600:	b7 01       	movw	r22, r14
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2608:	c1 16       	cp	r12, r17
    260a:	38 f4       	brcc	.+14     	; 0x261a <vfprintf+0x648>
    260c:	b7 01       	movw	r22, r14
    260e:	80 e3       	ldi	r24, 0x30	; 48
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2616:	11 50       	subi	r17, 0x01	; 1
    2618:	f7 cf       	rjmp	.-18     	; 0x2608 <vfprintf+0x636>
    261a:	ca 94       	dec	r12
    261c:	f3 01       	movw	r30, r6
    261e:	ec 0d       	add	r30, r12
    2620:	f1 1d       	adc	r31, r1
    2622:	80 81       	ld	r24, Z
    2624:	b7 01       	movw	r22, r14
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    262c:	c1 10       	cpse	r12, r1
    262e:	f5 cf       	rjmp	.-22     	; 0x261a <vfprintf+0x648>
    2630:	15 c0       	rjmp	.+42     	; 0x265c <vfprintf+0x68a>
    2632:	f4 e0       	ldi	r31, 0x04	; 4
    2634:	f5 15       	cp	r31, r5
    2636:	60 f5       	brcc	.+88     	; 0x2690 <vfprintf+0x6be>
    2638:	84 e0       	ldi	r24, 0x04	; 4
    263a:	58 1a       	sub	r5, r24
    263c:	93 fe       	sbrs	r9, 3
    263e:	1f c0       	rjmp	.+62     	; 0x267e <vfprintf+0x6ac>
    2640:	01 11       	cpse	r16, r1
    2642:	27 c0       	rjmp	.+78     	; 0x2692 <vfprintf+0x6c0>
    2644:	2c 85       	ldd	r18, Y+12	; 0x0c
    2646:	23 ff       	sbrs	r18, 3
    2648:	2a c0       	rjmp	.+84     	; 0x269e <vfprintf+0x6cc>
    264a:	06 ec       	ldi	r16, 0xC6	; 198
    264c:	10 e0       	ldi	r17, 0x00	; 0
    264e:	39 2d       	mov	r19, r9
    2650:	30 71       	andi	r19, 0x10	; 16
    2652:	93 2e       	mov	r9, r19
    2654:	f8 01       	movw	r30, r16
    2656:	84 91       	lpm	r24, Z
    2658:	81 11       	cpse	r24, r1
    265a:	24 c0       	rjmp	.+72     	; 0x26a4 <vfprintf+0x6d2>
    265c:	55 20       	and	r5, r5
    265e:	09 f4       	brne	.+2      	; 0x2662 <vfprintf+0x690>
    2660:	e4 cc       	rjmp	.-1592   	; 0x202a <vfprintf+0x58>
    2662:	b7 01       	movw	r22, r14
    2664:	80 e2       	ldi	r24, 0x20	; 32
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    266c:	5a 94       	dec	r5
    266e:	f6 cf       	rjmp	.-20     	; 0x265c <vfprintf+0x68a>
    2670:	f7 01       	movw	r30, r14
    2672:	86 81       	ldd	r24, Z+6	; 0x06
    2674:	97 81       	ldd	r25, Z+7	; 0x07
    2676:	26 c0       	rjmp	.+76     	; 0x26c4 <vfprintf+0x6f2>
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	23 c0       	rjmp	.+70     	; 0x26c4 <vfprintf+0x6f2>
    267e:	b7 01       	movw	r22, r14
    2680:	80 e2       	ldi	r24, 0x20	; 32
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    2688:	5a 94       	dec	r5
    268a:	51 10       	cpse	r5, r1
    268c:	f8 cf       	rjmp	.-16     	; 0x267e <vfprintf+0x6ac>
    268e:	d8 cf       	rjmp	.-80     	; 0x2640 <vfprintf+0x66e>
    2690:	51 2c       	mov	r5, r1
    2692:	b7 01       	movw	r22, r14
    2694:	80 2f       	mov	r24, r16
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    269c:	d3 cf       	rjmp	.-90     	; 0x2644 <vfprintf+0x672>
    269e:	0a ec       	ldi	r16, 0xCA	; 202
    26a0:	10 e0       	ldi	r17, 0x00	; 0
    26a2:	d5 cf       	rjmp	.-86     	; 0x264e <vfprintf+0x67c>
    26a4:	91 10       	cpse	r9, r1
    26a6:	80 52       	subi	r24, 0x20	; 32
    26a8:	b7 01       	movw	r22, r14
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 db 14 	call	0x29b6	; 0x29b6 <fputc>
    26b0:	0f 5f       	subi	r16, 0xFF	; 255
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	cf cf       	rjmp	.-98     	; 0x2654 <vfprintf+0x682>
    26b6:	23 e0       	ldi	r18, 0x03	; 3
    26b8:	25 15       	cp	r18, r5
    26ba:	10 f4       	brcc	.+4      	; 0x26c0 <vfprintf+0x6ee>
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	bd cf       	rjmp	.-134    	; 0x263a <vfprintf+0x668>
    26c0:	51 2c       	mov	r5, r1
    26c2:	c0 cf       	rjmp	.-128    	; 0x2644 <vfprintf+0x672>
    26c4:	60 96       	adiw	r28, 0x10	; 16
    26c6:	e2 e1       	ldi	r30, 0x12	; 18
    26c8:	0c 94 be 13 	jmp	0x277c	; 0x277c <__epilogue_restores__>

000026cc <__divmodhi4>:
    26cc:	97 fb       	bst	r25, 7
    26ce:	07 2e       	mov	r0, r23
    26d0:	16 f4       	brtc	.+4      	; 0x26d6 <__divmodhi4+0xa>
    26d2:	00 94       	com	r0
    26d4:	07 d0       	rcall	.+14     	; 0x26e4 <__divmodhi4_neg1>
    26d6:	77 fd       	sbrc	r23, 7
    26d8:	09 d0       	rcall	.+18     	; 0x26ec <__divmodhi4_neg2>
    26da:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodhi4>
    26de:	07 fc       	sbrc	r0, 7
    26e0:	05 d0       	rcall	.+10     	; 0x26ec <__divmodhi4_neg2>
    26e2:	3e f4       	brtc	.+14     	; 0x26f2 <__divmodhi4_exit>

000026e4 <__divmodhi4_neg1>:
    26e4:	90 95       	com	r25
    26e6:	81 95       	neg	r24
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	08 95       	ret

000026ec <__divmodhi4_neg2>:
    26ec:	70 95       	com	r23
    26ee:	61 95       	neg	r22
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255

000026f2 <__divmodhi4_exit>:
    26f2:	08 95       	ret

000026f4 <__udivmodsi4>:
    26f4:	a1 e2       	ldi	r26, 0x21	; 33
    26f6:	1a 2e       	mov	r1, r26
    26f8:	aa 1b       	sub	r26, r26
    26fa:	bb 1b       	sub	r27, r27
    26fc:	fd 01       	movw	r30, r26
    26fe:	0d c0       	rjmp	.+26     	; 0x271a <__udivmodsi4_ep>

00002700 <__udivmodsi4_loop>:
    2700:	aa 1f       	adc	r26, r26
    2702:	bb 1f       	adc	r27, r27
    2704:	ee 1f       	adc	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	a2 17       	cp	r26, r18
    270a:	b3 07       	cpc	r27, r19
    270c:	e4 07       	cpc	r30, r20
    270e:	f5 07       	cpc	r31, r21
    2710:	20 f0       	brcs	.+8      	; 0x271a <__udivmodsi4_ep>
    2712:	a2 1b       	sub	r26, r18
    2714:	b3 0b       	sbc	r27, r19
    2716:	e4 0b       	sbc	r30, r20
    2718:	f5 0b       	sbc	r31, r21

0000271a <__udivmodsi4_ep>:
    271a:	66 1f       	adc	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	88 1f       	adc	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	1a 94       	dec	r1
    2724:	69 f7       	brne	.-38     	; 0x2700 <__udivmodsi4_loop>
    2726:	60 95       	com	r22
    2728:	70 95       	com	r23
    272a:	80 95       	com	r24
    272c:	90 95       	com	r25
    272e:	9b 01       	movw	r18, r22
    2730:	ac 01       	movw	r20, r24
    2732:	bd 01       	movw	r22, r26
    2734:	cf 01       	movw	r24, r30
    2736:	08 95       	ret

00002738 <__tablejump2__>:
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	05 90       	lpm	r0, Z+
    273e:	f4 91       	lpm	r31, Z
    2740:	e0 2d       	mov	r30, r0
    2742:	09 94       	ijmp

00002744 <__prologue_saves__>:
    2744:	2f 92       	push	r2
    2746:	3f 92       	push	r3
    2748:	4f 92       	push	r4
    274a:	5f 92       	push	r5
    274c:	6f 92       	push	r6
    274e:	7f 92       	push	r7
    2750:	8f 92       	push	r8
    2752:	9f 92       	push	r9
    2754:	af 92       	push	r10
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	ca 1b       	sub	r28, r26
    276e:	db 0b       	sbc	r29, r27
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	09 94       	ijmp

0000277c <__epilogue_restores__>:
    277c:	2a 88       	ldd	r2, Y+18	; 0x12
    277e:	39 88       	ldd	r3, Y+17	; 0x11
    2780:	48 88       	ldd	r4, Y+16	; 0x10
    2782:	5f 84       	ldd	r5, Y+15	; 0x0f
    2784:	6e 84       	ldd	r6, Y+14	; 0x0e
    2786:	7d 84       	ldd	r7, Y+13	; 0x0d
    2788:	8c 84       	ldd	r8, Y+12	; 0x0c
    278a:	9b 84       	ldd	r9, Y+11	; 0x0b
    278c:	aa 84       	ldd	r10, Y+10	; 0x0a
    278e:	b9 84       	ldd	r11, Y+9	; 0x09
    2790:	c8 84       	ldd	r12, Y+8	; 0x08
    2792:	df 80       	ldd	r13, Y+7	; 0x07
    2794:	ee 80       	ldd	r14, Y+6	; 0x06
    2796:	fd 80       	ldd	r15, Y+5	; 0x05
    2798:	0c 81       	ldd	r16, Y+4	; 0x04
    279a:	1b 81       	ldd	r17, Y+3	; 0x03
    279c:	aa 81       	ldd	r26, Y+2	; 0x02
    279e:	b9 81       	ldd	r27, Y+1	; 0x01
    27a0:	ce 0f       	add	r28, r30
    27a2:	d1 1d       	adc	r29, r1
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	ed 01       	movw	r28, r26
    27b0:	08 95       	ret

000027b2 <__udivmodhi4>:
    27b2:	aa 1b       	sub	r26, r26
    27b4:	bb 1b       	sub	r27, r27
    27b6:	51 e1       	ldi	r21, 0x11	; 17
    27b8:	07 c0       	rjmp	.+14     	; 0x27c8 <__udivmodhi4_ep>

000027ba <__udivmodhi4_loop>:
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	a6 17       	cp	r26, r22
    27c0:	b7 07       	cpc	r27, r23
    27c2:	10 f0       	brcs	.+4      	; 0x27c8 <__udivmodhi4_ep>
    27c4:	a6 1b       	sub	r26, r22
    27c6:	b7 0b       	sbc	r27, r23

000027c8 <__udivmodhi4_ep>:
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	5a 95       	dec	r21
    27ce:	a9 f7       	brne	.-22     	; 0x27ba <__udivmodhi4_loop>
    27d0:	80 95       	com	r24
    27d2:	90 95       	com	r25
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	08 95       	ret

000027da <__ftoa_engine>:
    27da:	28 30       	cpi	r18, 0x08	; 8
    27dc:	08 f0       	brcs	.+2      	; 0x27e0 <__ftoa_engine+0x6>
    27de:	27 e0       	ldi	r18, 0x07	; 7
    27e0:	33 27       	eor	r19, r19
    27e2:	da 01       	movw	r26, r20
    27e4:	99 0f       	add	r25, r25
    27e6:	31 1d       	adc	r19, r1
    27e8:	87 fd       	sbrc	r24, 7
    27ea:	91 60       	ori	r25, 0x01	; 1
    27ec:	00 96       	adiw	r24, 0x00	; 0
    27ee:	61 05       	cpc	r22, r1
    27f0:	71 05       	cpc	r23, r1
    27f2:	39 f4       	brne	.+14     	; 0x2802 <__ftoa_engine+0x28>
    27f4:	32 60       	ori	r19, 0x02	; 2
    27f6:	2e 5f       	subi	r18, 0xFE	; 254
    27f8:	3d 93       	st	X+, r19
    27fa:	30 e3       	ldi	r19, 0x30	; 48
    27fc:	2a 95       	dec	r18
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <__ftoa_engine+0x1e>
    2800:	08 95       	ret
    2802:	9f 3f       	cpi	r25, 0xFF	; 255
    2804:	30 f0       	brcs	.+12     	; 0x2812 <__ftoa_engine+0x38>
    2806:	80 38       	cpi	r24, 0x80	; 128
    2808:	71 05       	cpc	r23, r1
    280a:	61 05       	cpc	r22, r1
    280c:	09 f0       	breq	.+2      	; 0x2810 <__ftoa_engine+0x36>
    280e:	3c 5f       	subi	r19, 0xFC	; 252
    2810:	3c 5f       	subi	r19, 0xFC	; 252
    2812:	3d 93       	st	X+, r19
    2814:	91 30       	cpi	r25, 0x01	; 1
    2816:	08 f0       	brcs	.+2      	; 0x281a <__ftoa_engine+0x40>
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	91 1d       	adc	r25, r1
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	1f 93       	push	r17
    2822:	0f 93       	push	r16
    2824:	ff 92       	push	r15
    2826:	ef 92       	push	r14
    2828:	19 2f       	mov	r17, r25
    282a:	98 7f       	andi	r25, 0xF8	; 248
    282c:	96 95       	lsr	r25
    282e:	e9 2f       	mov	r30, r25
    2830:	96 95       	lsr	r25
    2832:	96 95       	lsr	r25
    2834:	e9 0f       	add	r30, r25
    2836:	ff 27       	eor	r31, r31
    2838:	e8 5d       	subi	r30, 0xD8	; 216
    283a:	fe 4f       	sbci	r31, 0xFE	; 254
    283c:	99 27       	eor	r25, r25
    283e:	33 27       	eor	r19, r19
    2840:	ee 24       	eor	r14, r14
    2842:	ff 24       	eor	r15, r15
    2844:	a7 01       	movw	r20, r14
    2846:	e7 01       	movw	r28, r14
    2848:	05 90       	lpm	r0, Z+
    284a:	08 94       	sec
    284c:	07 94       	ror	r0
    284e:	28 f4       	brcc	.+10     	; 0x285a <__ftoa_engine+0x80>
    2850:	36 0f       	add	r19, r22
    2852:	e7 1e       	adc	r14, r23
    2854:	f8 1e       	adc	r15, r24
    2856:	49 1f       	adc	r20, r25
    2858:	51 1d       	adc	r21, r1
    285a:	66 0f       	add	r22, r22
    285c:	77 1f       	adc	r23, r23
    285e:	88 1f       	adc	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	06 94       	lsr	r0
    2864:	a1 f7       	brne	.-24     	; 0x284e <__ftoa_engine+0x74>
    2866:	05 90       	lpm	r0, Z+
    2868:	07 94       	ror	r0
    286a:	28 f4       	brcc	.+10     	; 0x2876 <__ftoa_engine+0x9c>
    286c:	e7 0e       	add	r14, r23
    286e:	f8 1e       	adc	r15, r24
    2870:	49 1f       	adc	r20, r25
    2872:	56 1f       	adc	r21, r22
    2874:	c1 1d       	adc	r28, r1
    2876:	77 0f       	add	r23, r23
    2878:	88 1f       	adc	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	66 1f       	adc	r22, r22
    287e:	06 94       	lsr	r0
    2880:	a1 f7       	brne	.-24     	; 0x286a <__ftoa_engine+0x90>
    2882:	05 90       	lpm	r0, Z+
    2884:	07 94       	ror	r0
    2886:	28 f4       	brcc	.+10     	; 0x2892 <__ftoa_engine+0xb8>
    2888:	f8 0e       	add	r15, r24
    288a:	49 1f       	adc	r20, r25
    288c:	56 1f       	adc	r21, r22
    288e:	c7 1f       	adc	r28, r23
    2890:	d1 1d       	adc	r29, r1
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	66 1f       	adc	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	06 94       	lsr	r0
    289c:	a1 f7       	brne	.-24     	; 0x2886 <__ftoa_engine+0xac>
    289e:	05 90       	lpm	r0, Z+
    28a0:	07 94       	ror	r0
    28a2:	20 f4       	brcc	.+8      	; 0x28ac <__ftoa_engine+0xd2>
    28a4:	49 0f       	add	r20, r25
    28a6:	56 1f       	adc	r21, r22
    28a8:	c7 1f       	adc	r28, r23
    28aa:	d8 1f       	adc	r29, r24
    28ac:	99 0f       	add	r25, r25
    28ae:	66 1f       	adc	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	06 94       	lsr	r0
    28b6:	a9 f7       	brne	.-22     	; 0x28a2 <__ftoa_engine+0xc8>
    28b8:	84 91       	lpm	r24, Z
    28ba:	10 95       	com	r17
    28bc:	17 70       	andi	r17, 0x07	; 7
    28be:	41 f0       	breq	.+16     	; 0x28d0 <__ftoa_engine+0xf6>
    28c0:	d6 95       	lsr	r29
    28c2:	c7 95       	ror	r28
    28c4:	57 95       	ror	r21
    28c6:	47 95       	ror	r20
    28c8:	f7 94       	ror	r15
    28ca:	e7 94       	ror	r14
    28cc:	1a 95       	dec	r17
    28ce:	c1 f7       	brne	.-16     	; 0x28c0 <__ftoa_engine+0xe6>
    28d0:	ee ec       	ldi	r30, 0xCE	; 206
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	68 94       	set
    28d6:	15 90       	lpm	r1, Z+
    28d8:	15 91       	lpm	r17, Z+
    28da:	35 91       	lpm	r19, Z+
    28dc:	65 91       	lpm	r22, Z+
    28de:	95 91       	lpm	r25, Z+
    28e0:	05 90       	lpm	r0, Z+
    28e2:	7f e2       	ldi	r23, 0x2F	; 47
    28e4:	73 95       	inc	r23
    28e6:	e1 18       	sub	r14, r1
    28e8:	f1 0a       	sbc	r15, r17
    28ea:	43 0b       	sbc	r20, r19
    28ec:	56 0b       	sbc	r21, r22
    28ee:	c9 0b       	sbc	r28, r25
    28f0:	d0 09       	sbc	r29, r0
    28f2:	c0 f7       	brcc	.-16     	; 0x28e4 <__ftoa_engine+0x10a>
    28f4:	e1 0c       	add	r14, r1
    28f6:	f1 1e       	adc	r15, r17
    28f8:	43 1f       	adc	r20, r19
    28fa:	56 1f       	adc	r21, r22
    28fc:	c9 1f       	adc	r28, r25
    28fe:	d0 1d       	adc	r29, r0
    2900:	7e f4       	brtc	.+30     	; 0x2920 <__ftoa_engine+0x146>
    2902:	70 33       	cpi	r23, 0x30	; 48
    2904:	11 f4       	brne	.+4      	; 0x290a <__ftoa_engine+0x130>
    2906:	8a 95       	dec	r24
    2908:	e6 cf       	rjmp	.-52     	; 0x28d6 <__ftoa_engine+0xfc>
    290a:	e8 94       	clt
    290c:	01 50       	subi	r16, 0x01	; 1
    290e:	30 f0       	brcs	.+12     	; 0x291c <__ftoa_engine+0x142>
    2910:	08 0f       	add	r16, r24
    2912:	0a f4       	brpl	.+2      	; 0x2916 <__ftoa_engine+0x13c>
    2914:	00 27       	eor	r16, r16
    2916:	02 17       	cp	r16, r18
    2918:	08 f4       	brcc	.+2      	; 0x291c <__ftoa_engine+0x142>
    291a:	20 2f       	mov	r18, r16
    291c:	23 95       	inc	r18
    291e:	02 2f       	mov	r16, r18
    2920:	7a 33       	cpi	r23, 0x3A	; 58
    2922:	28 f0       	brcs	.+10     	; 0x292e <__ftoa_engine+0x154>
    2924:	79 e3       	ldi	r23, 0x39	; 57
    2926:	7d 93       	st	X+, r23
    2928:	2a 95       	dec	r18
    292a:	e9 f7       	brne	.-6      	; 0x2926 <__ftoa_engine+0x14c>
    292c:	10 c0       	rjmp	.+32     	; 0x294e <__ftoa_engine+0x174>
    292e:	7d 93       	st	X+, r23
    2930:	2a 95       	dec	r18
    2932:	89 f6       	brne	.-94     	; 0x28d6 <__ftoa_engine+0xfc>
    2934:	06 94       	lsr	r0
    2936:	97 95       	ror	r25
    2938:	67 95       	ror	r22
    293a:	37 95       	ror	r19
    293c:	17 95       	ror	r17
    293e:	17 94       	ror	r1
    2940:	e1 18       	sub	r14, r1
    2942:	f1 0a       	sbc	r15, r17
    2944:	43 0b       	sbc	r20, r19
    2946:	56 0b       	sbc	r21, r22
    2948:	c9 0b       	sbc	r28, r25
    294a:	d0 09       	sbc	r29, r0
    294c:	98 f0       	brcs	.+38     	; 0x2974 <__ftoa_engine+0x19a>
    294e:	23 95       	inc	r18
    2950:	7e 91       	ld	r23, -X
    2952:	73 95       	inc	r23
    2954:	7a 33       	cpi	r23, 0x3A	; 58
    2956:	08 f0       	brcs	.+2      	; 0x295a <__ftoa_engine+0x180>
    2958:	70 e3       	ldi	r23, 0x30	; 48
    295a:	7c 93       	st	X, r23
    295c:	20 13       	cpse	r18, r16
    295e:	b8 f7       	brcc	.-18     	; 0x294e <__ftoa_engine+0x174>
    2960:	7e 91       	ld	r23, -X
    2962:	70 61       	ori	r23, 0x10	; 16
    2964:	7d 93       	st	X+, r23
    2966:	30 f0       	brcs	.+12     	; 0x2974 <__ftoa_engine+0x19a>
    2968:	83 95       	inc	r24
    296a:	71 e3       	ldi	r23, 0x31	; 49
    296c:	7d 93       	st	X+, r23
    296e:	70 e3       	ldi	r23, 0x30	; 48
    2970:	2a 95       	dec	r18
    2972:	e1 f7       	brne	.-8      	; 0x296c <__ftoa_engine+0x192>
    2974:	11 24       	eor	r1, r1
    2976:	ef 90       	pop	r14
    2978:	ff 90       	pop	r15
    297a:	0f 91       	pop	r16
    297c:	1f 91       	pop	r17
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	99 27       	eor	r25, r25
    2984:	87 fd       	sbrc	r24, 7
    2986:	90 95       	com	r25
    2988:	08 95       	ret

0000298a <strnlen_P>:
    298a:	fc 01       	movw	r30, r24
    298c:	05 90       	lpm	r0, Z+
    298e:	61 50       	subi	r22, 0x01	; 1
    2990:	70 40       	sbci	r23, 0x00	; 0
    2992:	01 10       	cpse	r0, r1
    2994:	d8 f7       	brcc	.-10     	; 0x298c <strnlen_P+0x2>
    2996:	80 95       	com	r24
    2998:	90 95       	com	r25
    299a:	8e 0f       	add	r24, r30
    299c:	9f 1f       	adc	r25, r31
    299e:	08 95       	ret

000029a0 <strnlen>:
    29a0:	fc 01       	movw	r30, r24
    29a2:	61 50       	subi	r22, 0x01	; 1
    29a4:	70 40       	sbci	r23, 0x00	; 0
    29a6:	01 90       	ld	r0, Z+
    29a8:	01 10       	cpse	r0, r1
    29aa:	d8 f7       	brcc	.-10     	; 0x29a2 <strnlen+0x2>
    29ac:	80 95       	com	r24
    29ae:	90 95       	com	r25
    29b0:	8e 0f       	add	r24, r30
    29b2:	9f 1f       	adc	r25, r31
    29b4:	08 95       	ret

000029b6 <fputc>:
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	fb 01       	movw	r30, r22
    29c0:	23 81       	ldd	r18, Z+3	; 0x03
    29c2:	21 fd       	sbrc	r18, 1
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <fputc+0x16>
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	9f ef       	ldi	r25, 0xFF	; 255
    29ca:	2c c0       	rjmp	.+88     	; 0x2a24 <fputc+0x6e>
    29cc:	22 ff       	sbrs	r18, 2
    29ce:	16 c0       	rjmp	.+44     	; 0x29fc <fputc+0x46>
    29d0:	46 81       	ldd	r20, Z+6	; 0x06
    29d2:	57 81       	ldd	r21, Z+7	; 0x07
    29d4:	24 81       	ldd	r18, Z+4	; 0x04
    29d6:	35 81       	ldd	r19, Z+5	; 0x05
    29d8:	42 17       	cp	r20, r18
    29da:	53 07       	cpc	r21, r19
    29dc:	44 f4       	brge	.+16     	; 0x29ee <fputc+0x38>
    29de:	a0 81       	ld	r26, Z
    29e0:	b1 81       	ldd	r27, Z+1	; 0x01
    29e2:	9d 01       	movw	r18, r26
    29e4:	2f 5f       	subi	r18, 0xFF	; 255
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	31 83       	std	Z+1, r19	; 0x01
    29ea:	20 83       	st	Z, r18
    29ec:	8c 93       	st	X, r24
    29ee:	26 81       	ldd	r18, Z+6	; 0x06
    29f0:	37 81       	ldd	r19, Z+7	; 0x07
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	37 83       	std	Z+7, r19	; 0x07
    29f8:	26 83       	std	Z+6, r18	; 0x06
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <fputc+0x6e>
    29fc:	8b 01       	movw	r16, r22
    29fe:	ec 01       	movw	r28, r24
    2a00:	fb 01       	movw	r30, r22
    2a02:	00 84       	ldd	r0, Z+8	; 0x08
    2a04:	f1 85       	ldd	r31, Z+9	; 0x09
    2a06:	e0 2d       	mov	r30, r0
    2a08:	09 95       	icall
    2a0a:	89 2b       	or	r24, r25
    2a0c:	e1 f6       	brne	.-72     	; 0x29c6 <fputc+0x10>
    2a0e:	d8 01       	movw	r26, r16
    2a10:	16 96       	adiw	r26, 0x06	; 6
    2a12:	8d 91       	ld	r24, X+
    2a14:	9c 91       	ld	r25, X
    2a16:	17 97       	sbiw	r26, 0x07	; 7
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	17 96       	adiw	r26, 0x07	; 7
    2a1c:	9c 93       	st	X, r25
    2a1e:	8e 93       	st	-X, r24
    2a20:	16 97       	sbiw	r26, 0x06	; 6
    2a22:	ce 01       	movw	r24, r28
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	08 95       	ret

00002a2e <sprintf>:
    2a2e:	ae e0       	ldi	r26, 0x0E	; 14
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ed e1       	ldi	r30, 0x1D	; 29
    2a34:	f5 e1       	ldi	r31, 0x15	; 21
    2a36:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x1c>
    2a3a:	0d 89       	ldd	r16, Y+21	; 0x15
    2a3c:	1e 89       	ldd	r17, Y+22	; 0x16
    2a3e:	86 e0       	ldi	r24, 0x06	; 6
    2a40:	8c 83       	std	Y+4, r24	; 0x04
    2a42:	1a 83       	std	Y+2, r17	; 0x02
    2a44:	09 83       	std	Y+1, r16	; 0x01
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	9f e7       	ldi	r25, 0x7F	; 127
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	ae 01       	movw	r20, r28
    2a50:	47 5e       	subi	r20, 0xE7	; 231
    2a52:	5f 4f       	sbci	r21, 0xFF	; 255
    2a54:	6f 89       	ldd	r22, Y+23	; 0x17
    2a56:	78 8d       	ldd	r23, Y+24	; 0x18
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <vfprintf>
    2a60:	ef 81       	ldd	r30, Y+7	; 0x07
    2a62:	f8 85       	ldd	r31, Y+8	; 0x08
    2a64:	e0 0f       	add	r30, r16
    2a66:	f1 1f       	adc	r31, r17
    2a68:	10 82       	st	Z, r1
    2a6a:	2e 96       	adiw	r28, 0x0e	; 14
    2a6c:	e4 e0       	ldi	r30, 0x04	; 4
    2a6e:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x1c>

00002a72 <__ultoa_invert>:
    2a72:	fa 01       	movw	r30, r20
    2a74:	aa 27       	eor	r26, r26
    2a76:	28 30       	cpi	r18, 0x08	; 8
    2a78:	51 f1       	breq	.+84     	; 0x2ace <__ultoa_invert+0x5c>
    2a7a:	20 31       	cpi	r18, 0x10	; 16
    2a7c:	81 f1       	breq	.+96     	; 0x2ade <__ultoa_invert+0x6c>
    2a7e:	e8 94       	clt
    2a80:	6f 93       	push	r22
    2a82:	6e 7f       	andi	r22, 0xFE	; 254
    2a84:	6e 5f       	subi	r22, 0xFE	; 254
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	af 4f       	sbci	r26, 0xFF	; 255
    2a8e:	b1 e0       	ldi	r27, 0x01	; 1
    2a90:	3e d0       	rcall	.+124    	; 0x2b0e <__ultoa_invert+0x9c>
    2a92:	b4 e0       	ldi	r27, 0x04	; 4
    2a94:	3c d0       	rcall	.+120    	; 0x2b0e <__ultoa_invert+0x9c>
    2a96:	67 0f       	add	r22, r23
    2a98:	78 1f       	adc	r23, r24
    2a9a:	89 1f       	adc	r24, r25
    2a9c:	9a 1f       	adc	r25, r26
    2a9e:	a1 1d       	adc	r26, r1
    2aa0:	68 0f       	add	r22, r24
    2aa2:	79 1f       	adc	r23, r25
    2aa4:	8a 1f       	adc	r24, r26
    2aa6:	91 1d       	adc	r25, r1
    2aa8:	a1 1d       	adc	r26, r1
    2aaa:	6a 0f       	add	r22, r26
    2aac:	71 1d       	adc	r23, r1
    2aae:	81 1d       	adc	r24, r1
    2ab0:	91 1d       	adc	r25, r1
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	20 d0       	rcall	.+64     	; 0x2af6 <__ultoa_invert+0x84>
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <__ultoa_invert+0x48>
    2ab8:	68 94       	set
    2aba:	3f 91       	pop	r19
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	26 9f       	mul	r18, r22
    2ac0:	11 24       	eor	r1, r1
    2ac2:	30 19       	sub	r19, r0
    2ac4:	30 5d       	subi	r19, 0xD0	; 208
    2ac6:	31 93       	st	Z+, r19
    2ac8:	de f6       	brtc	.-74     	; 0x2a80 <__ultoa_invert+0xe>
    2aca:	cf 01       	movw	r24, r30
    2acc:	08 95       	ret
    2ace:	46 2f       	mov	r20, r22
    2ad0:	47 70       	andi	r20, 0x07	; 7
    2ad2:	40 5d       	subi	r20, 0xD0	; 208
    2ad4:	41 93       	st	Z+, r20
    2ad6:	b3 e0       	ldi	r27, 0x03	; 3
    2ad8:	0f d0       	rcall	.+30     	; 0x2af8 <__ultoa_invert+0x86>
    2ada:	c9 f7       	brne	.-14     	; 0x2ace <__ultoa_invert+0x5c>
    2adc:	f6 cf       	rjmp	.-20     	; 0x2aca <__ultoa_invert+0x58>
    2ade:	46 2f       	mov	r20, r22
    2ae0:	4f 70       	andi	r20, 0x0F	; 15
    2ae2:	40 5d       	subi	r20, 0xD0	; 208
    2ae4:	4a 33       	cpi	r20, 0x3A	; 58
    2ae6:	18 f0       	brcs	.+6      	; 0x2aee <__ultoa_invert+0x7c>
    2ae8:	49 5d       	subi	r20, 0xD9	; 217
    2aea:	31 fd       	sbrc	r19, 1
    2aec:	40 52       	subi	r20, 0x20	; 32
    2aee:	41 93       	st	Z+, r20
    2af0:	02 d0       	rcall	.+4      	; 0x2af6 <__ultoa_invert+0x84>
    2af2:	a9 f7       	brne	.-22     	; 0x2ade <__ultoa_invert+0x6c>
    2af4:	ea cf       	rjmp	.-44     	; 0x2aca <__ultoa_invert+0x58>
    2af6:	b4 e0       	ldi	r27, 0x04	; 4
    2af8:	a6 95       	lsr	r26
    2afa:	97 95       	ror	r25
    2afc:	87 95       	ror	r24
    2afe:	77 95       	ror	r23
    2b00:	67 95       	ror	r22
    2b02:	ba 95       	dec	r27
    2b04:	c9 f7       	brne	.-14     	; 0x2af8 <__ultoa_invert+0x86>
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	61 05       	cpc	r22, r1
    2b0a:	71 05       	cpc	r23, r1
    2b0c:	08 95       	ret
    2b0e:	9b 01       	movw	r18, r22
    2b10:	ac 01       	movw	r20, r24
    2b12:	0a 2e       	mov	r0, r26
    2b14:	06 94       	lsr	r0
    2b16:	57 95       	ror	r21
    2b18:	47 95       	ror	r20
    2b1a:	37 95       	ror	r19
    2b1c:	27 95       	ror	r18
    2b1e:	ba 95       	dec	r27
    2b20:	c9 f7       	brne	.-14     	; 0x2b14 <__ultoa_invert+0xa2>
    2b22:	62 0f       	add	r22, r18
    2b24:	73 1f       	adc	r23, r19
    2b26:	84 1f       	adc	r24, r20
    2b28:	95 1f       	adc	r25, r21
    2b2a:	a0 1d       	adc	r26, r0
    2b2c:	08 95       	ret

00002b2e <_exit>:
    2b2e:	f8 94       	cli

00002b30 <__stop_program>:
    2b30:	ff cf       	rjmp	.-2      	; 0x2b30 <__stop_program>
